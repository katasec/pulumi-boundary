# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BoundaryCredentialStoreVaultArgs', 'BoundaryCredentialStoreVault']

@pulumi.input_type
class BoundaryCredentialStoreVaultArgs:
    def __init__(__self__, *,
                 address: pulumi.Input[str],
                 scope_id: pulumi.Input[str],
                 token: pulumi.Input[str],
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a BoundaryCredentialStoreVault resource.
        :param pulumi.Input[str] address: The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        :param pulumi.Input[str] scope_id: The scope for this credential store.
        :param pulumi.Input[str] token: A token used for accessing Vault.
        :param pulumi.Input[str] ca_cert: A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        :param pulumi.Input[str] client_certificate: A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        :param pulumi.Input[str] client_certificate_key: A PEM-encoded private key matching the client certificate from 'client_certificate'.
        :param pulumi.Input[str] description: The Vault credential store description.
        :param pulumi.Input[str] name: The Vault credential store name. Defaults to the resource name.
        :param pulumi.Input[str] namespace: The namespace within Vault to use.
        :param pulumi.Input[str] tls_server_name: Name to use as the SNI host when connecting to Vault via TLS.
        :param pulumi.Input[bool] tls_skip_verify: Whether or not to skip TLS verification.
        """
        pulumi.set(__self__, "address", address)
        pulumi.set(__self__, "scope_id", scope_id)
        pulumi.set(__self__, "token", token)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_certificate_key is not None:
            pulumi.set(__self__, "client_certificate_key", client_certificate_key)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Input[str]:
        """
        The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: pulumi.Input[str]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope for this credential store.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter
    def token(self) -> pulumi.Input[str]:
        """
        A token used for accessing Vault.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: pulumi.Input[str]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientCertificateKey")
    def client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        """
        A PEM-encoded private key matching the client certificate from 'client_certificate'.
        """
        return pulumi.get(self, "client_certificate_key")

    @client_certificate_key.setter
    def client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential store description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential store name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace within Vault to use.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to use as the SNI host when connecting to Vault via TLS.
        """
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to skip TLS verification.
        """
        return pulumi.get(self, "tls_skip_verify")

    @tls_skip_verify.setter
    def tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_skip_verify", value)


@pulumi.input_type
class _BoundaryCredentialStoreVaultState:
    def __init__(__self__, *,
                 address: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 token_hmac: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BoundaryCredentialStoreVault resources.
        :param pulumi.Input[str] address: The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        :param pulumi.Input[str] ca_cert: A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        :param pulumi.Input[str] client_certificate: A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        :param pulumi.Input[str] client_certificate_key: A PEM-encoded private key matching the client certificate from 'client_certificate'.
        :param pulumi.Input[str] client_certificate_key_hmac: The Vault client certificate key hmac.
        :param pulumi.Input[str] description: The Vault credential store description.
        :param pulumi.Input[str] name: The Vault credential store name. Defaults to the resource name.
        :param pulumi.Input[str] namespace: The namespace within Vault to use.
        :param pulumi.Input[str] scope_id: The scope for this credential store.
        :param pulumi.Input[str] tls_server_name: Name to use as the SNI host when connecting to Vault via TLS.
        :param pulumi.Input[bool] tls_skip_verify: Whether or not to skip TLS verification.
        :param pulumi.Input[str] token: A token used for accessing Vault.
        :param pulumi.Input[str] token_hmac: The Vault token hmac.
        """
        if address is not None:
            pulumi.set(__self__, "address", address)
        if ca_cert is not None:
            pulumi.set(__self__, "ca_cert", ca_cert)
        if client_certificate is not None:
            pulumi.set(__self__, "client_certificate", client_certificate)
        if client_certificate_key is not None:
            pulumi.set(__self__, "client_certificate_key", client_certificate_key)
        if client_certificate_key_hmac is not None:
            pulumi.set(__self__, "client_certificate_key_hmac", client_certificate_key_hmac)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if namespace is not None:
            pulumi.set(__self__, "namespace", namespace)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if tls_server_name is not None:
            pulumi.set(__self__, "tls_server_name", tls_server_name)
        if tls_skip_verify is not None:
            pulumi.set(__self__, "tls_skip_verify", tls_skip_verify)
        if token is not None:
            pulumi.set(__self__, "token", token)
        if token_hmac is not None:
            pulumi.set(__self__, "token_hmac", token_hmac)

    @property
    @pulumi.getter
    def address(self) -> Optional[pulumi.Input[str]]:
        """
        The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        """
        return pulumi.get(self, "address")

    @address.setter
    def address(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "address", value)

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> Optional[pulumi.Input[str]]:
        """
        A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        """
        return pulumi.get(self, "ca_cert")

    @ca_cert.setter
    def ca_cert(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "ca_cert", value)

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> Optional[pulumi.Input[str]]:
        """
        A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        """
        return pulumi.get(self, "client_certificate")

    @client_certificate.setter
    def client_certificate(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate", value)

    @property
    @pulumi.getter(name="clientCertificateKey")
    def client_certificate_key(self) -> Optional[pulumi.Input[str]]:
        """
        A PEM-encoded private key matching the client certificate from 'client_certificate'.
        """
        return pulumi.get(self, "client_certificate_key")

    @client_certificate_key.setter
    def client_certificate_key(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key", value)

    @property
    @pulumi.getter(name="clientCertificateKeyHmac")
    def client_certificate_key_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault client certificate key hmac.
        """
        return pulumi.get(self, "client_certificate_key_hmac")

    @client_certificate_key_hmac.setter
    def client_certificate_key_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_certificate_key_hmac", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential store description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential store name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def namespace(self) -> Optional[pulumi.Input[str]]:
        """
        The namespace within Vault to use.
        """
        return pulumi.get(self, "namespace")

    @namespace.setter
    def namespace(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "namespace", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope for this credential store.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> Optional[pulumi.Input[str]]:
        """
        Name to use as the SNI host when connecting to Vault via TLS.
        """
        return pulumi.get(self, "tls_server_name")

    @tls_server_name.setter
    def tls_server_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tls_server_name", value)

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> Optional[pulumi.Input[bool]]:
        """
        Whether or not to skip TLS verification.
        """
        return pulumi.get(self, "tls_skip_verify")

    @tls_skip_verify.setter
    def tls_skip_verify(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "tls_skip_verify", value)

    @property
    @pulumi.getter
    def token(self) -> Optional[pulumi.Input[str]]:
        """
        A token used for accessing Vault.
        """
        return pulumi.get(self, "token")

    @token.setter
    def token(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token", value)

    @property
    @pulumi.getter(name="tokenHmac")
    def token_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault token hmac.
        """
        return pulumi.get(self, "token_hmac")

    @token_hmac.setter
    def token_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "token_hmac", value)


class BoundaryCredentialStoreVault(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The credential store for Vault resource allows you to configure a Boundary credential store for Vault.

        ## Example Usage

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        example = boundary.BoundaryCredentialStoreVault("example",
            description="My first Vault credential store!",
            address="http://127.0.0.1:8200",
            token="s.0ufRo6XEGU2jOqnIr7OlFYP5",
            scope_id=project.id)
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryCredentialStoreVault:BoundaryCredentialStoreVault foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        :param pulumi.Input[str] ca_cert: A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        :param pulumi.Input[str] client_certificate: A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        :param pulumi.Input[str] client_certificate_key: A PEM-encoded private key matching the client certificate from 'client_certificate'.
        :param pulumi.Input[str] description: The Vault credential store description.
        :param pulumi.Input[str] name: The Vault credential store name. Defaults to the resource name.
        :param pulumi.Input[str] namespace: The namespace within Vault to use.
        :param pulumi.Input[str] scope_id: The scope for this credential store.
        :param pulumi.Input[str] tls_server_name: Name to use as the SNI host when connecting to Vault via TLS.
        :param pulumi.Input[bool] tls_skip_verify: Whether or not to skip TLS verification.
        :param pulumi.Input[str] token: A token used for accessing Vault.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BoundaryCredentialStoreVaultArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The credential store for Vault resource allows you to configure a Boundary credential store for Vault.

        ## Example Usage

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        example = boundary.BoundaryCredentialStoreVault("example",
            description="My first Vault credential store!",
            address="http://127.0.0.1:8200",
            token="s.0ufRo6XEGU2jOqnIr7OlFYP5",
            scope_id=project.id)
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryCredentialStoreVault:BoundaryCredentialStoreVault foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param BoundaryCredentialStoreVaultArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BoundaryCredentialStoreVaultArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 address: Optional[pulumi.Input[str]] = None,
                 ca_cert: Optional[pulumi.Input[str]] = None,
                 client_certificate: Optional[pulumi.Input[str]] = None,
                 client_certificate_key: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 namespace: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 tls_server_name: Optional[pulumi.Input[str]] = None,
                 tls_skip_verify: Optional[pulumi.Input[bool]] = None,
                 token: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BoundaryCredentialStoreVaultArgs.__new__(BoundaryCredentialStoreVaultArgs)

            if address is None and not opts.urn:
                raise TypeError("Missing required property 'address'")
            __props__.__dict__["address"] = address
            __props__.__dict__["ca_cert"] = ca_cert
            __props__.__dict__["client_certificate"] = client_certificate
            __props__.__dict__["client_certificate_key"] = client_certificate_key
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            __props__.__dict__["namespace"] = namespace
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["tls_server_name"] = tls_server_name
            __props__.__dict__["tls_skip_verify"] = tls_skip_verify
            if token is None and not opts.urn:
                raise TypeError("Missing required property 'token'")
            __props__.__dict__["token"] = token
            __props__.__dict__["client_certificate_key_hmac"] = None
            __props__.__dict__["token_hmac"] = None
        super(BoundaryCredentialStoreVault, __self__).__init__(
            'boundary:index/boundaryCredentialStoreVault:BoundaryCredentialStoreVault',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            address: Optional[pulumi.Input[str]] = None,
            ca_cert: Optional[pulumi.Input[str]] = None,
            client_certificate: Optional[pulumi.Input[str]] = None,
            client_certificate_key: Optional[pulumi.Input[str]] = None,
            client_certificate_key_hmac: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            namespace: Optional[pulumi.Input[str]] = None,
            scope_id: Optional[pulumi.Input[str]] = None,
            tls_server_name: Optional[pulumi.Input[str]] = None,
            tls_skip_verify: Optional[pulumi.Input[bool]] = None,
            token: Optional[pulumi.Input[str]] = None,
            token_hmac: Optional[pulumi.Input[str]] = None) -> 'BoundaryCredentialStoreVault':
        """
        Get an existing BoundaryCredentialStoreVault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] address: The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        :param pulumi.Input[str] ca_cert: A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        :param pulumi.Input[str] client_certificate: A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        :param pulumi.Input[str] client_certificate_key: A PEM-encoded private key matching the client certificate from 'client_certificate'.
        :param pulumi.Input[str] client_certificate_key_hmac: The Vault client certificate key hmac.
        :param pulumi.Input[str] description: The Vault credential store description.
        :param pulumi.Input[str] name: The Vault credential store name. Defaults to the resource name.
        :param pulumi.Input[str] namespace: The namespace within Vault to use.
        :param pulumi.Input[str] scope_id: The scope for this credential store.
        :param pulumi.Input[str] tls_server_name: Name to use as the SNI host when connecting to Vault via TLS.
        :param pulumi.Input[bool] tls_skip_verify: Whether or not to skip TLS verification.
        :param pulumi.Input[str] token: A token used for accessing Vault.
        :param pulumi.Input[str] token_hmac: The Vault token hmac.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BoundaryCredentialStoreVaultState.__new__(_BoundaryCredentialStoreVaultState)

        __props__.__dict__["address"] = address
        __props__.__dict__["ca_cert"] = ca_cert
        __props__.__dict__["client_certificate"] = client_certificate
        __props__.__dict__["client_certificate_key"] = client_certificate_key
        __props__.__dict__["client_certificate_key_hmac"] = client_certificate_key_hmac
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["namespace"] = namespace
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["tls_server_name"] = tls_server_name
        __props__.__dict__["tls_skip_verify"] = tls_skip_verify
        __props__.__dict__["token"] = token
        __props__.__dict__["token_hmac"] = token_hmac
        return BoundaryCredentialStoreVault(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def address(self) -> pulumi.Output[str]:
        """
        The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
        """
        return pulumi.get(self, "address")

    @property
    @pulumi.getter(name="caCert")
    def ca_cert(self) -> pulumi.Output[Optional[str]]:
        """
        A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
        """
        return pulumi.get(self, "ca_cert")

    @property
    @pulumi.getter(name="clientCertificate")
    def client_certificate(self) -> pulumi.Output[Optional[str]]:
        """
        A PEM-encoded client certificate to use for TLS authentication to the Vault server.
        """
        return pulumi.get(self, "client_certificate")

    @property
    @pulumi.getter(name="clientCertificateKey")
    def client_certificate_key(self) -> pulumi.Output[Optional[str]]:
        """
        A PEM-encoded private key matching the client certificate from 'client_certificate'.
        """
        return pulumi.get(self, "client_certificate_key")

    @property
    @pulumi.getter(name="clientCertificateKeyHmac")
    def client_certificate_key_hmac(self) -> pulumi.Output[str]:
        """
        The Vault client certificate key hmac.
        """
        return pulumi.get(self, "client_certificate_key_hmac")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The Vault credential store description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Vault credential store name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def namespace(self) -> pulumi.Output[Optional[str]]:
        """
        The namespace within Vault to use.
        """
        return pulumi.get(self, "namespace")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[str]:
        """
        The scope for this credential store.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter(name="tlsServerName")
    def tls_server_name(self) -> pulumi.Output[Optional[str]]:
        """
        Name to use as the SNI host when connecting to Vault via TLS.
        """
        return pulumi.get(self, "tls_server_name")

    @property
    @pulumi.getter(name="tlsSkipVerify")
    def tls_skip_verify(self) -> pulumi.Output[Optional[bool]]:
        """
        Whether or not to skip TLS verification.
        """
        return pulumi.get(self, "tls_skip_verify")

    @property
    @pulumi.getter
    def token(self) -> pulumi.Output[str]:
        """
        A token used for accessing Vault.
        """
        return pulumi.get(self, "token")

    @property
    @pulumi.getter(name="tokenHmac")
    def token_hmac(self) -> pulumi.Output[str]:
        """
        The Vault token hmac.
        """
        return pulumi.get(self, "token_hmac")

