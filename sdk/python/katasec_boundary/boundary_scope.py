# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BoundaryScopeArgs', 'BoundaryScope']

@pulumi.input_type
class BoundaryScopeArgs:
    def __init__(__self__, *,
                 scope_id: pulumi.Input[str],
                 auto_create_admin_role: Optional[pulumi.Input[bool]] = None,
                 auto_create_default_role: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_scope: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BoundaryScope resource.
        :param pulumi.Input[str] scope_id: The scope ID containing the sub scope resource.
        :param pulumi.Input[bool] auto_create_admin_role: If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
               in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
               HCL but results in role resources that are unmanaged by Terraform.
        :param pulumi.Input[bool] auto_create_default_role: Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
               functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
               ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
               that are unmanaged by Terraform.
        :param pulumi.Input[str] description: The scope description.
        :param pulumi.Input[bool] global_scope: Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        :param pulumi.Input[str] name: The scope name. Defaults to the resource name.
        """
        pulumi.set(__self__, "scope_id", scope_id)
        if auto_create_admin_role is not None:
            pulumi.set(__self__, "auto_create_admin_role", auto_create_admin_role)
        if auto_create_default_role is not None:
            pulumi.set(__self__, "auto_create_default_role", auto_create_default_role)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_scope is not None:
            pulumi.set(__self__, "global_scope", global_scope)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope ID containing the sub scope resource.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="autoCreateAdminRole")
    def auto_create_admin_role(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
        in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
        HCL but results in role resources that are unmanaged by Terraform.
        """
        return pulumi.get(self, "auto_create_admin_role")

    @auto_create_admin_role.setter
    def auto_create_admin_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_admin_role", value)

    @property
    @pulumi.getter(name="autoCreateDefaultRole")
    def auto_create_default_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
        functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
        ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
        that are unmanaged by Terraform.
        """
        return pulumi.get(self, "auto_create_default_role")

    @auto_create_default_role.setter
    def auto_create_default_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_default_role", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The scope description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalScope")
    def global_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        """
        return pulumi.get(self, "global_scope")

    @global_scope.setter
    def global_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_scope", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The scope name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _BoundaryScopeState:
    def __init__(__self__, *,
                 auto_create_admin_role: Optional[pulumi.Input[bool]] = None,
                 auto_create_default_role: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_scope: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BoundaryScope resources.
        :param pulumi.Input[bool] auto_create_admin_role: If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
               in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
               HCL but results in role resources that are unmanaged by Terraform.
        :param pulumi.Input[bool] auto_create_default_role: Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
               functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
               ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
               that are unmanaged by Terraform.
        :param pulumi.Input[str] description: The scope description.
        :param pulumi.Input[bool] global_scope: Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        :param pulumi.Input[str] name: The scope name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID containing the sub scope resource.
        """
        if auto_create_admin_role is not None:
            pulumi.set(__self__, "auto_create_admin_role", auto_create_admin_role)
        if auto_create_default_role is not None:
            pulumi.set(__self__, "auto_create_default_role", auto_create_default_role)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if global_scope is not None:
            pulumi.set(__self__, "global_scope", global_scope)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)

    @property
    @pulumi.getter(name="autoCreateAdminRole")
    def auto_create_admin_role(self) -> Optional[pulumi.Input[bool]]:
        """
        If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
        in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
        HCL but results in role resources that are unmanaged by Terraform.
        """
        return pulumi.get(self, "auto_create_admin_role")

    @auto_create_admin_role.setter
    def auto_create_admin_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_admin_role", value)

    @property
    @pulumi.getter(name="autoCreateDefaultRole")
    def auto_create_default_role(self) -> Optional[pulumi.Input[bool]]:
        """
        Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
        functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
        ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
        that are unmanaged by Terraform.
        """
        return pulumi.get(self, "auto_create_default_role")

    @auto_create_default_role.setter
    def auto_create_default_role(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_create_default_role", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The scope description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="globalScope")
    def global_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        """
        return pulumi.get(self, "global_scope")

    @global_scope.setter
    def global_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "global_scope", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The scope name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope ID containing the sub scope resource.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)


class BoundaryScope(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_create_admin_role: Optional[pulumi.Input[bool]] = None,
                 auto_create_default_role: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_scope: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The scope resource allows you to configure a Boundary scope.

        ## Example Usage

        Creating the global scope:

        ```python
        import pulumi
        import katasec_boundary as boundary

        global_ = boundary.BoundaryScope("global",
            global_scope=True,
            scope_id="global")
        ```

        Creating an organization scope within global:

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id=boundary_scope["global"]["id"],
            auto_create_admin_role=True,
            auto_create_default_role=True)
        ```

        Creating an project scope within an organization:

        ```python
        import pulumi
        import katasec_boundary as boundary

        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=boundary_scope["org"]["id"],
            auto_create_admin_role=True)
        ```

        Creating an organization scope with a managed role for administration (auto create role set false):

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id=boundary_scope["global"]["id"])
        org_admin = boundary.BoundaryRole("orgAdmin",
            scope_id=boundary_scope["global"]["id"],
            grant_scope_id=org.id,
            grant_strings=["id=*;type=*;actions=*"],
            principal_ids=["u_auth"])
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryScope:BoundaryScope foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_create_admin_role: If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
               in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
               HCL but results in role resources that are unmanaged by Terraform.
        :param pulumi.Input[bool] auto_create_default_role: Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
               functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
               ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
               that are unmanaged by Terraform.
        :param pulumi.Input[str] description: The scope description.
        :param pulumi.Input[bool] global_scope: Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        :param pulumi.Input[str] name: The scope name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID containing the sub scope resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BoundaryScopeArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The scope resource allows you to configure a Boundary scope.

        ## Example Usage

        Creating the global scope:

        ```python
        import pulumi
        import katasec_boundary as boundary

        global_ = boundary.BoundaryScope("global",
            global_scope=True,
            scope_id="global")
        ```

        Creating an organization scope within global:

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id=boundary_scope["global"]["id"],
            auto_create_admin_role=True,
            auto_create_default_role=True)
        ```

        Creating an project scope within an organization:

        ```python
        import pulumi
        import katasec_boundary as boundary

        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=boundary_scope["org"]["id"],
            auto_create_admin_role=True)
        ```

        Creating an organization scope with a managed role for administration (auto create role set false):

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id=boundary_scope["global"]["id"])
        org_admin = boundary.BoundaryRole("orgAdmin",
            scope_id=boundary_scope["global"]["id"],
            grant_scope_id=org.id,
            grant_strings=["id=*;type=*;actions=*"],
            principal_ids=["u_auth"])
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryScope:BoundaryScope foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param BoundaryScopeArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BoundaryScopeArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_create_admin_role: Optional[pulumi.Input[bool]] = None,
                 auto_create_default_role: Optional[pulumi.Input[bool]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 global_scope: Optional[pulumi.Input[bool]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BoundaryScopeArgs.__new__(BoundaryScopeArgs)

            __props__.__dict__["auto_create_admin_role"] = auto_create_admin_role
            __props__.__dict__["auto_create_default_role"] = auto_create_default_role
            __props__.__dict__["description"] = description
            __props__.__dict__["global_scope"] = global_scope
            __props__.__dict__["name"] = name
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
        super(BoundaryScope, __self__).__init__(
            'boundary:index/boundaryScope:BoundaryScope',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_create_admin_role: Optional[pulumi.Input[bool]] = None,
            auto_create_default_role: Optional[pulumi.Input[bool]] = None,
            description: Optional[pulumi.Input[str]] = None,
            global_scope: Optional[pulumi.Input[bool]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scope_id: Optional[pulumi.Input[str]] = None) -> 'BoundaryScope':
        """
        Get an existing BoundaryScope resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_create_admin_role: If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
               in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
               HCL but results in role resources that are unmanaged by Terraform.
        :param pulumi.Input[bool] auto_create_default_role: Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
               functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
               ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
               that are unmanaged by Terraform.
        :param pulumi.Input[str] description: The scope description.
        :param pulumi.Input[bool] global_scope: Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        :param pulumi.Input[str] name: The scope name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID containing the sub scope resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BoundaryScopeState.__new__(_BoundaryScopeState)

        __props__.__dict__["auto_create_admin_role"] = auto_create_admin_role
        __props__.__dict__["auto_create_default_role"] = auto_create_default_role
        __props__.__dict__["description"] = description
        __props__.__dict__["global_scope"] = global_scope
        __props__.__dict__["name"] = name
        __props__.__dict__["scope_id"] = scope_id
        return BoundaryScope(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoCreateAdminRole")
    def auto_create_admin_role(self) -> pulumi.Output[Optional[bool]]:
        """
        If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
        in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
        HCL but results in role resources that are unmanaged by Terraform.
        """
        return pulumi.get(self, "auto_create_admin_role")

    @property
    @pulumi.getter(name="autoCreateDefaultRole")
    def auto_create_default_role(self) -> pulumi.Output[Optional[bool]]:
        """
        Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
        functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
        ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
        that are unmanaged by Terraform.
        """
        return pulumi.get(self, "auto_create_default_role")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The scope description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="globalScope")
    def global_scope(self) -> pulumi.Output[Optional[bool]]:
        """
        Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
        """
        return pulumi.get(self, "global_scope")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The scope name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[str]:
        """
        The scope ID containing the sub scope resource.
        """
        return pulumi.get(self, "scope_id")

