# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BoundaryCredentialUserNameArgs', 'BoundaryCredentialUserName']

@pulumi.input_type
class BoundaryCredentialUserNameArgs:
    def __init__(__self__, *,
                 credential_store_id: pulumi.Input[str],
                 password: pulumi.Input[str],
                 username: pulumi.Input[str],
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BoundaryCredentialUserName resource.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this username/password credential.
        :param pulumi.Input[str] password: The password of this username/password credential.
        :param pulumi.Input[str] username: The username of this username/password credential.
        :param pulumi.Input[str] description: The description of this username/password credential.
        :param pulumi.Input[str] name: The name of this username/password credential. Defaults to the resource name.
        """
        pulumi.set(__self__, "credential_store_id", credential_store_id)
        pulumi.set(__self__, "password", password)
        pulumi.set(__self__, "username", username)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Input[str]:
        """
        The credential store in which to save this username/password credential.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter
    def password(self) -> pulumi.Input[str]:
        """
        The password of this username/password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: pulumi.Input[str]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter
    def username(self) -> pulumi.Input[str]:
        """
        The username of this username/password credential.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: pulumi.Input[str]):
        pulumi.set(self, "username", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this username/password credential.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this username/password credential. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _BoundaryCredentialUserNameState:
    def __init__(__self__, *,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 password_hmac: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BoundaryCredentialUserName resources.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this username/password credential.
        :param pulumi.Input[str] description: The description of this username/password credential.
        :param pulumi.Input[str] name: The name of this username/password credential. Defaults to the resource name.
        :param pulumi.Input[str] password: The password of this username/password credential.
        :param pulumi.Input[str] password_hmac: The password hmac.
        :param pulumi.Input[str] username: The username of this username/password credential.
        """
        if credential_store_id is not None:
            pulumi.set(__self__, "credential_store_id", credential_store_id)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if password is not None:
            pulumi.set(__self__, "password", password)
        if password_hmac is not None:
            pulumi.set(__self__, "password_hmac", password_hmac)
        if username is not None:
            pulumi.set(__self__, "username", username)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        The credential store in which to save this username/password credential.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The description of this username/password credential.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of this username/password credential. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def password(self) -> Optional[pulumi.Input[str]]:
        """
        The password of this username/password credential.
        """
        return pulumi.get(self, "password")

    @password.setter
    def password(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password", value)

    @property
    @pulumi.getter(name="passwordHmac")
    def password_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The password hmac.
        """
        return pulumi.get(self, "password_hmac")

    @password_hmac.setter
    def password_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "password_hmac", value)

    @property
    @pulumi.getter
    def username(self) -> Optional[pulumi.Input[str]]:
        """
        The username of this username/password credential.
        """
        return pulumi.get(self, "username")

    @username.setter
    def username(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "username", value)


class BoundaryCredentialUserName(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The username/password credential resource allows you to configure a credential using a username and password pair.

        ## Example Usage

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="global scope",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        example_boundary_credential_store_static = boundary.BoundaryCredentialStoreStatic("exampleBoundaryCredentialStoreStatic",
            description="My first static credential store!",
            scope_id=project.id)
        example_boundary_credential_user_name = boundary.BoundaryCredentialUserName("exampleBoundaryCredentialUserName",
            description="My first username password credential!",
            credential_store_id=example_boundary_credential_store_static.id,
            username="my-username",
            password="my-password")
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryCredentialUserName:BoundaryCredentialUserName example_username_password <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this username/password credential.
        :param pulumi.Input[str] description: The description of this username/password credential.
        :param pulumi.Input[str] name: The name of this username/password credential. Defaults to the resource name.
        :param pulumi.Input[str] password: The password of this username/password credential.
        :param pulumi.Input[str] username: The username of this username/password credential.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BoundaryCredentialUserNameArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The username/password credential resource allows you to configure a credential using a username and password pair.

        ## Example Usage

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="global scope",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        example_boundary_credential_store_static = boundary.BoundaryCredentialStoreStatic("exampleBoundaryCredentialStoreStatic",
            description="My first static credential store!",
            scope_id=project.id)
        example_boundary_credential_user_name = boundary.BoundaryCredentialUserName("exampleBoundaryCredentialUserName",
            description="My first username password credential!",
            credential_store_id=example_boundary_credential_store_static.id,
            username="my-username",
            password="my-password")
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryCredentialUserName:BoundaryCredentialUserName example_username_password <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param BoundaryCredentialUserNameArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BoundaryCredentialUserNameArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 password: Optional[pulumi.Input[str]] = None,
                 username: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BoundaryCredentialUserNameArgs.__new__(BoundaryCredentialUserNameArgs)

            if credential_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'credential_store_id'")
            __props__.__dict__["credential_store_id"] = credential_store_id
            __props__.__dict__["description"] = description
            __props__.__dict__["name"] = name
            if password is None and not opts.urn:
                raise TypeError("Missing required property 'password'")
            __props__.__dict__["password"] = password
            if username is None and not opts.urn:
                raise TypeError("Missing required property 'username'")
            __props__.__dict__["username"] = username
            __props__.__dict__["password_hmac"] = None
        super(BoundaryCredentialUserName, __self__).__init__(
            'boundary:index/boundaryCredentialUserName:BoundaryCredentialUserName',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credential_store_id: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            password: Optional[pulumi.Input[str]] = None,
            password_hmac: Optional[pulumi.Input[str]] = None,
            username: Optional[pulumi.Input[str]] = None) -> 'BoundaryCredentialUserName':
        """
        Get an existing BoundaryCredentialUserName resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_store_id: The credential store in which to save this username/password credential.
        :param pulumi.Input[str] description: The description of this username/password credential.
        :param pulumi.Input[str] name: The name of this username/password credential. Defaults to the resource name.
        :param pulumi.Input[str] password: The password of this username/password credential.
        :param pulumi.Input[str] password_hmac: The password hmac.
        :param pulumi.Input[str] username: The username of this username/password credential.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BoundaryCredentialUserNameState.__new__(_BoundaryCredentialUserNameState)

        __props__.__dict__["credential_store_id"] = credential_store_id
        __props__.__dict__["description"] = description
        __props__.__dict__["name"] = name
        __props__.__dict__["password"] = password
        __props__.__dict__["password_hmac"] = password_hmac
        __props__.__dict__["username"] = username
        return BoundaryCredentialUserName(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Output[str]:
        """
        The credential store in which to save this username/password credential.
        """
        return pulumi.get(self, "credential_store_id")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The description of this username/password credential.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The name of this username/password credential. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def password(self) -> pulumi.Output[str]:
        """
        The password of this username/password credential.
        """
        return pulumi.get(self, "password")

    @property
    @pulumi.getter(name="passwordHmac")
    def password_hmac(self) -> pulumi.Output[str]:
        """
        The password hmac.
        """
        return pulumi.get(self, "password_hmac")

    @property
    @pulumi.getter
    def username(self) -> pulumi.Output[str]:
        """
        The username of this username/password credential.
        """
        return pulumi.get(self, "username")

