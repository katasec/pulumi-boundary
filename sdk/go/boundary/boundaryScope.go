// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The scope resource allows you to configure a Boundary scope.
//
// ## Example Usage
//
// Creating the global scope:
//
// ```go
// package main
//
// import (
//
//	"github.com/katasec/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := boundary.NewBoundaryScope(ctx, "global", &boundary.BoundaryScopeArgs{
//				GlobalScope: pulumi.Bool(true),
//				ScopeId:     pulumi.String("global"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating an organization scope within global:
//
// ```go
// package main
//
// import (
//
//	"github.com/katasec/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := boundary.NewBoundaryScope(ctx, "org", &boundary.BoundaryScopeArgs{
//				Description:           pulumi.String("My first scope!"),
//				ScopeId:               pulumi.Any(boundary_scope.Global.Id),
//				AutoCreateAdminRole:   pulumi.Bool(true),
//				AutoCreateDefaultRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating an project scope within an organization:
//
// ```go
// package main
//
// import (
//
//	"github.com/katasec/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := boundary.NewBoundaryScope(ctx, "project", &boundary.BoundaryScopeArgs{
//				Description:         pulumi.String("My first scope!"),
//				ScopeId:             pulumi.Any(boundary_scope.Org.Id),
//				AutoCreateAdminRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// Creating an organization scope with a managed role for administration (auto create role set false):
//
// ```go
// package main
//
// import (
//
//	"github.com/katasec/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			org, err := boundary.NewBoundaryScope(ctx, "org", &boundary.BoundaryScopeArgs{
//				Description: pulumi.String("My first scope!"),
//				ScopeId:     pulumi.Any(boundary_scope.Global.Id),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewBoundaryRole(ctx, "orgAdmin", &boundary.BoundaryRoleArgs{
//				ScopeId:      pulumi.Any(boundary_scope.Global.Id),
//				GrantScopeId: org.ID(),
//				GrantStrings: pulumi.StringArray{
//					pulumi.String("id=*;type=*;actions=*"),
//				},
//				PrincipalIds: pulumi.StringArray{
//					pulumi.String("u_auth"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import boundary:index/boundaryScope:BoundaryScope foo <my-id>
//
// ```
type BoundaryScope struct {
	pulumi.CustomResourceState

	// If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
	// in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
	// HCL but results in role resources that are unmanaged by Terraform.
	AutoCreateAdminRole pulumi.BoolPtrOutput `pulumi:"autoCreateAdminRole"`
	// Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
	// functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
	// ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
	// that are unmanaged by Terraform.
	AutoCreateDefaultRole pulumi.BoolPtrOutput `pulumi:"autoCreateDefaultRole"`
	// The scope description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
	GlobalScope pulumi.BoolPtrOutput `pulumi:"globalScope"`
	// The scope name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID containing the sub scope resource.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
}

// NewBoundaryScope registers a new resource with the given unique name, arguments, and options.
func NewBoundaryScope(ctx *pulumi.Context,
	name string, args *BoundaryScopeArgs, opts ...pulumi.ResourceOption) (*BoundaryScope, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BoundaryScope
	err := ctx.RegisterResource("boundary:index/boundaryScope:BoundaryScope", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBoundaryScope gets an existing BoundaryScope resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBoundaryScope(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BoundaryScopeState, opts ...pulumi.ResourceOption) (*BoundaryScope, error) {
	var resource BoundaryScope
	err := ctx.ReadResource("boundary:index/boundaryScope:BoundaryScope", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BoundaryScope resources.
type boundaryScopeState struct {
	// If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
	// in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
	// HCL but results in role resources that are unmanaged by Terraform.
	AutoCreateAdminRole *bool `pulumi:"autoCreateAdminRole"`
	// Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
	// functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
	// ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
	// that are unmanaged by Terraform.
	AutoCreateDefaultRole *bool `pulumi:"autoCreateDefaultRole"`
	// The scope description.
	Description *string `pulumi:"description"`
	// Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
	GlobalScope *bool `pulumi:"globalScope"`
	// The scope name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID containing the sub scope resource.
	ScopeId *string `pulumi:"scopeId"`
}

type BoundaryScopeState struct {
	// If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
	// in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
	// HCL but results in role resources that are unmanaged by Terraform.
	AutoCreateAdminRole pulumi.BoolPtrInput
	// Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
	// functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
	// ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
	// that are unmanaged by Terraform.
	AutoCreateDefaultRole pulumi.BoolPtrInput
	// The scope description.
	Description pulumi.StringPtrInput
	// Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
	GlobalScope pulumi.BoolPtrInput
	// The scope name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID containing the sub scope resource.
	ScopeId pulumi.StringPtrInput
}

func (BoundaryScopeState) ElementType() reflect.Type {
	return reflect.TypeOf((*boundaryScopeState)(nil)).Elem()
}

type boundaryScopeArgs struct {
	// If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
	// in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
	// HCL but results in role resources that are unmanaged by Terraform.
	AutoCreateAdminRole *bool `pulumi:"autoCreateAdminRole"`
	// Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
	// functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
	// ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
	// that are unmanaged by Terraform.
	AutoCreateDefaultRole *bool `pulumi:"autoCreateDefaultRole"`
	// The scope description.
	Description *string `pulumi:"description"`
	// Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
	GlobalScope *bool `pulumi:"globalScope"`
	// The scope name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID containing the sub scope resource.
	ScopeId string `pulumi:"scopeId"`
}

// The set of arguments for constructing a BoundaryScope resource.
type BoundaryScopeArgs struct {
	// If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
	// in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
	// HCL but results in role resources that are unmanaged by Terraform.
	AutoCreateAdminRole pulumi.BoolPtrInput
	// Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
	// functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
	// ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
	// that are unmanaged by Terraform.
	AutoCreateDefaultRole pulumi.BoolPtrInput
	// The scope description.
	Description pulumi.StringPtrInput
	// Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
	GlobalScope pulumi.BoolPtrInput
	// The scope name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID containing the sub scope resource.
	ScopeId pulumi.StringInput
}

func (BoundaryScopeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*boundaryScopeArgs)(nil)).Elem()
}

type BoundaryScopeInput interface {
	pulumi.Input

	ToBoundaryScopeOutput() BoundaryScopeOutput
	ToBoundaryScopeOutputWithContext(ctx context.Context) BoundaryScopeOutput
}

func (*BoundaryScope) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundaryScope)(nil)).Elem()
}

func (i *BoundaryScope) ToBoundaryScopeOutput() BoundaryScopeOutput {
	return i.ToBoundaryScopeOutputWithContext(context.Background())
}

func (i *BoundaryScope) ToBoundaryScopeOutputWithContext(ctx context.Context) BoundaryScopeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryScopeOutput)
}

// BoundaryScopeArrayInput is an input type that accepts BoundaryScopeArray and BoundaryScopeArrayOutput values.
// You can construct a concrete instance of `BoundaryScopeArrayInput` via:
//
//	BoundaryScopeArray{ BoundaryScopeArgs{...} }
type BoundaryScopeArrayInput interface {
	pulumi.Input

	ToBoundaryScopeArrayOutput() BoundaryScopeArrayOutput
	ToBoundaryScopeArrayOutputWithContext(context.Context) BoundaryScopeArrayOutput
}

type BoundaryScopeArray []BoundaryScopeInput

func (BoundaryScopeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BoundaryScope)(nil)).Elem()
}

func (i BoundaryScopeArray) ToBoundaryScopeArrayOutput() BoundaryScopeArrayOutput {
	return i.ToBoundaryScopeArrayOutputWithContext(context.Background())
}

func (i BoundaryScopeArray) ToBoundaryScopeArrayOutputWithContext(ctx context.Context) BoundaryScopeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryScopeArrayOutput)
}

// BoundaryScopeMapInput is an input type that accepts BoundaryScopeMap and BoundaryScopeMapOutput values.
// You can construct a concrete instance of `BoundaryScopeMapInput` via:
//
//	BoundaryScopeMap{ "key": BoundaryScopeArgs{...} }
type BoundaryScopeMapInput interface {
	pulumi.Input

	ToBoundaryScopeMapOutput() BoundaryScopeMapOutput
	ToBoundaryScopeMapOutputWithContext(context.Context) BoundaryScopeMapOutput
}

type BoundaryScopeMap map[string]BoundaryScopeInput

func (BoundaryScopeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BoundaryScope)(nil)).Elem()
}

func (i BoundaryScopeMap) ToBoundaryScopeMapOutput() BoundaryScopeMapOutput {
	return i.ToBoundaryScopeMapOutputWithContext(context.Background())
}

func (i BoundaryScopeMap) ToBoundaryScopeMapOutputWithContext(ctx context.Context) BoundaryScopeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryScopeMapOutput)
}

type BoundaryScopeOutput struct{ *pulumi.OutputState }

func (BoundaryScopeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundaryScope)(nil)).Elem()
}

func (o BoundaryScopeOutput) ToBoundaryScopeOutput() BoundaryScopeOutput {
	return o
}

func (o BoundaryScopeOutput) ToBoundaryScopeOutputWithContext(ctx context.Context) BoundaryScopeOutput {
	return o
}

// If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
// in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
// HCL but results in role resources that are unmanaged by Terraform.
func (o BoundaryScopeOutput) AutoCreateAdminRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoundaryScope) pulumi.BoolPtrOutput { return v.AutoCreateAdminRole }).(pulumi.BoolPtrOutput)
}

// Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
// functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
// ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
// that are unmanaged by Terraform.
func (o BoundaryScopeOutput) AutoCreateDefaultRole() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoundaryScope) pulumi.BoolPtrOutput { return v.AutoCreateDefaultRole }).(pulumi.BoolPtrOutput)
}

// The scope description.
func (o BoundaryScopeOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryScope) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
func (o BoundaryScopeOutput) GlobalScope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoundaryScope) pulumi.BoolPtrOutput { return v.GlobalScope }).(pulumi.BoolPtrOutput)
}

// The scope name. Defaults to the resource name.
func (o BoundaryScopeOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryScope) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID containing the sub scope resource.
func (o BoundaryScopeOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryScope) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

type BoundaryScopeArrayOutput struct{ *pulumi.OutputState }

func (BoundaryScopeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BoundaryScope)(nil)).Elem()
}

func (o BoundaryScopeArrayOutput) ToBoundaryScopeArrayOutput() BoundaryScopeArrayOutput {
	return o
}

func (o BoundaryScopeArrayOutput) ToBoundaryScopeArrayOutputWithContext(ctx context.Context) BoundaryScopeArrayOutput {
	return o
}

func (o BoundaryScopeArrayOutput) Index(i pulumi.IntInput) BoundaryScopeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BoundaryScope {
		return vs[0].([]*BoundaryScope)[vs[1].(int)]
	}).(BoundaryScopeOutput)
}

type BoundaryScopeMapOutput struct{ *pulumi.OutputState }

func (BoundaryScopeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BoundaryScope)(nil)).Elem()
}

func (o BoundaryScopeMapOutput) ToBoundaryScopeMapOutput() BoundaryScopeMapOutput {
	return o
}

func (o BoundaryScopeMapOutput) ToBoundaryScopeMapOutputWithContext(ctx context.Context) BoundaryScopeMapOutput {
	return o
}

func (o BoundaryScopeMapOutput) MapIndex(k pulumi.StringInput) BoundaryScopeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BoundaryScope {
		return vs[0].(map[string]*BoundaryScope)[vs[1].(string)]
	}).(BoundaryScopeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryScopeInput)(nil)).Elem(), &BoundaryScope{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryScopeArrayInput)(nil)).Elem(), BoundaryScopeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryScopeMapInput)(nil)).Elem(), BoundaryScopeMap{})
	pulumi.RegisterOutputType(BoundaryScopeOutput{})
	pulumi.RegisterOutputType(BoundaryScopeArrayOutput{})
	pulumi.RegisterOutputType(BoundaryScopeMapOutput{})
}
