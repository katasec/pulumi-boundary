# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BoundaryAuthMethodOidcArgs', 'BoundaryAuthMethodOidc']

@pulumi.input_type
class BoundaryAuthMethodOidcArgs:
    def __init__(__self__, *,
                 scope_id: pulumi.Input[str],
                 account_claim_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url_prefix: Optional[pulumi.Input[str]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 claims_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_secret_hmac: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_discovered_config_validation: Optional[pulumi.Input[bool]] = None,
                 idp_ca_certs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 signing_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BoundaryAuthMethodOidc resource.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_claim_maps: Account claim maps for the to_claim of sub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_audiences: Audiences for which the provider responses will be allowed
        :param pulumi.Input[str] api_url_prefix: The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        :param pulumi.Input[str] callback_url: The URL that should be provided to the IdP for callbacks.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] claims_scopes: Claims scopes.
        :param pulumi.Input[str] client_id: The client ID assigned to this auth method from the provider.
        :param pulumi.Input[str] client_secret: The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        :param pulumi.Input[str] client_secret_hmac: The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] disable_discovered_config_validation: Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] idp_ca_certs: A list of CA certificates to trust when validating the IdP's token signatures.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        :param pulumi.Input[str] issuer: The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        :param pulumi.Input[int] max_age: The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] signing_algorithms: Allowed signing algorithms for the provider's issued tokens.
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        """
        pulumi.set(__self__, "scope_id", scope_id)
        if account_claim_maps is not None:
            pulumi.set(__self__, "account_claim_maps", account_claim_maps)
        if allowed_audiences is not None:
            pulumi.set(__self__, "allowed_audiences", allowed_audiences)
        if api_url_prefix is not None:
            pulumi.set(__self__, "api_url_prefix", api_url_prefix)
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if claims_scopes is not None:
            pulumi.set(__self__, "claims_scopes", claims_scopes)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_secret_hmac is not None:
            pulumi.set(__self__, "client_secret_hmac", client_secret_hmac)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_discovered_config_validation is not None:
            pulumi.set(__self__, "disable_discovered_config_validation", disable_discovered_config_validation)
        if idp_ca_certs is not None:
            pulumi.set(__self__, "idp_ca_certs", idp_ca_certs)
        if is_primary_for_scope is not None:
            pulumi.set(__self__, "is_primary_for_scope", is_primary_for_scope)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if signing_algorithms is not None:
            pulumi.set(__self__, "signing_algorithms", signing_algorithms)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="accountClaimMaps")
    def account_claim_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Account claim maps for the to_claim of sub.
        """
        return pulumi.get(self, "account_claim_maps")

    @account_claim_maps.setter
    def account_claim_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_claim_maps", value)

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Audiences for which the provider responses will be allowed
        """
        return pulumi.get(self, "allowed_audiences")

    @allowed_audiences.setter
    def allowed_audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_audiences", value)

    @property
    @pulumi.getter(name="apiUrlPrefix")
    def api_url_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        """
        return pulumi.get(self, "api_url_prefix")

    @api_url_prefix.setter
    def api_url_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url_prefix", value)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL that should be provided to the IdP for callbacks.
        """
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_url", value)

    @property
    @pulumi.getter(name="claimsScopes")
    def claims_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Claims scopes.
        """
        return pulumi.get(self, "claims_scopes")

    @claims_scopes.setter
    def claims_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "claims_scopes", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID assigned to this auth method from the provider.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="clientSecretHmac")
    def client_secret_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "client_secret_hmac")

    @client_secret_hmac.setter
    def client_secret_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_hmac", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableDiscoveredConfigValidation")
    def disable_discovered_config_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        """
        return pulumi.get(self, "disable_discovered_config_validation")

    @disable_discovered_config_validation.setter
    def disable_discovered_config_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_discovered_config_validation", value)

    @property
    @pulumi.getter(name="idpCaCerts")
    def idp_ca_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of CA certificates to trust when validating the IdP's token signatures.
        """
        return pulumi.get(self, "idp_ca_certs")

    @idp_ca_certs.setter
    def idp_ca_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "idp_ca_certs", value)

    @property
    @pulumi.getter(name="isPrimaryForScope")
    def is_primary_for_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        """
        return pulumi.get(self, "is_primary_for_scope")

    @is_primary_for_scope.setter
    def is_primary_for_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary_for_scope", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="signingAlgorithms")
    def signing_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed signing algorithms for the provider's issued tokens.
        """
        return pulumi.get(self, "signing_algorithms")

    @signing_algorithms.setter
    def signing_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "signing_algorithms", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of auth method; hardcoded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _BoundaryAuthMethodOidcState:
    def __init__(__self__, *,
                 account_claim_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url_prefix: Optional[pulumi.Input[str]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 claims_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_secret_hmac: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_discovered_config_validation: Optional[pulumi.Input[bool]] = None,
                 idp_ca_certs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 signing_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BoundaryAuthMethodOidc resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_claim_maps: Account claim maps for the to_claim of sub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_audiences: Audiences for which the provider responses will be allowed
        :param pulumi.Input[str] api_url_prefix: The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        :param pulumi.Input[str] callback_url: The URL that should be provided to the IdP for callbacks.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] claims_scopes: Claims scopes.
        :param pulumi.Input[str] client_id: The client ID assigned to this auth method from the provider.
        :param pulumi.Input[str] client_secret: The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        :param pulumi.Input[str] client_secret_hmac: The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] disable_discovered_config_validation: Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] idp_ca_certs: A list of CA certificates to trust when validating the IdP's token signatures.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        :param pulumi.Input[str] issuer: The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        :param pulumi.Input[int] max_age: The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] signing_algorithms: Allowed signing algorithms for the provider's issued tokens.
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        """
        if account_claim_maps is not None:
            pulumi.set(__self__, "account_claim_maps", account_claim_maps)
        if allowed_audiences is not None:
            pulumi.set(__self__, "allowed_audiences", allowed_audiences)
        if api_url_prefix is not None:
            pulumi.set(__self__, "api_url_prefix", api_url_prefix)
        if callback_url is not None:
            pulumi.set(__self__, "callback_url", callback_url)
        if claims_scopes is not None:
            pulumi.set(__self__, "claims_scopes", claims_scopes)
        if client_id is not None:
            pulumi.set(__self__, "client_id", client_id)
        if client_secret is not None:
            pulumi.set(__self__, "client_secret", client_secret)
        if client_secret_hmac is not None:
            pulumi.set(__self__, "client_secret_hmac", client_secret_hmac)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if disable_discovered_config_validation is not None:
            pulumi.set(__self__, "disable_discovered_config_validation", disable_discovered_config_validation)
        if idp_ca_certs is not None:
            pulumi.set(__self__, "idp_ca_certs", idp_ca_certs)
        if is_primary_for_scope is not None:
            pulumi.set(__self__, "is_primary_for_scope", is_primary_for_scope)
        if issuer is not None:
            pulumi.set(__self__, "issuer", issuer)
        if max_age is not None:
            pulumi.set(__self__, "max_age", max_age)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if signing_algorithms is not None:
            pulumi.set(__self__, "signing_algorithms", signing_algorithms)
        if state is not None:
            pulumi.set(__self__, "state", state)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter(name="accountClaimMaps")
    def account_claim_maps(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Account claim maps for the to_claim of sub.
        """
        return pulumi.get(self, "account_claim_maps")

    @account_claim_maps.setter
    def account_claim_maps(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "account_claim_maps", value)

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Audiences for which the provider responses will be allowed
        """
        return pulumi.get(self, "allowed_audiences")

    @allowed_audiences.setter
    def allowed_audiences(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "allowed_audiences", value)

    @property
    @pulumi.getter(name="apiUrlPrefix")
    def api_url_prefix(self) -> Optional[pulumi.Input[str]]:
        """
        The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        """
        return pulumi.get(self, "api_url_prefix")

    @api_url_prefix.setter
    def api_url_prefix(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "api_url_prefix", value)

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> Optional[pulumi.Input[str]]:
        """
        The URL that should be provided to the IdP for callbacks.
        """
        return pulumi.get(self, "callback_url")

    @callback_url.setter
    def callback_url(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "callback_url", value)

    @property
    @pulumi.getter(name="claimsScopes")
    def claims_scopes(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Claims scopes.
        """
        return pulumi.get(self, "claims_scopes")

    @claims_scopes.setter
    def claims_scopes(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "claims_scopes", value)

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> Optional[pulumi.Input[str]]:
        """
        The client ID assigned to this auth method from the provider.
        """
        return pulumi.get(self, "client_id")

    @client_id.setter
    def client_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_id", value)

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> Optional[pulumi.Input[str]]:
        """
        The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        """
        return pulumi.get(self, "client_secret")

    @client_secret.setter
    def client_secret(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret", value)

    @property
    @pulumi.getter(name="clientSecretHmac")
    def client_secret_hmac(self) -> Optional[pulumi.Input[str]]:
        """
        The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "client_secret_hmac")

    @client_secret_hmac.setter
    def client_secret_hmac(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "client_secret_hmac", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="disableDiscoveredConfigValidation")
    def disable_discovered_config_validation(self) -> Optional[pulumi.Input[bool]]:
        """
        Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        """
        return pulumi.get(self, "disable_discovered_config_validation")

    @disable_discovered_config_validation.setter
    def disable_discovered_config_validation(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "disable_discovered_config_validation", value)

    @property
    @pulumi.getter(name="idpCaCerts")
    def idp_ca_certs(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of CA certificates to trust when validating the IdP's token signatures.
        """
        return pulumi.get(self, "idp_ca_certs")

    @idp_ca_certs.setter
    def idp_ca_certs(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "idp_ca_certs", value)

    @property
    @pulumi.getter(name="isPrimaryForScope")
    def is_primary_for_scope(self) -> Optional[pulumi.Input[bool]]:
        """
        When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        """
        return pulumi.get(self, "is_primary_for_scope")

    @is_primary_for_scope.setter
    def is_primary_for_scope(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "is_primary_for_scope", value)

    @property
    @pulumi.getter
    def issuer(self) -> Optional[pulumi.Input[str]]:
        """
        The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        """
        return pulumi.get(self, "issuer")

    @issuer.setter
    def issuer(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "issuer", value)

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> Optional[pulumi.Input[int]]:
        """
        The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        """
        return pulumi.get(self, "max_age")

    @max_age.setter
    def max_age(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "max_age", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The auth method name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="signingAlgorithms")
    def signing_algorithms(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        Allowed signing algorithms for the provider's issued tokens.
        """
        return pulumi.get(self, "signing_algorithms")

    @signing_algorithms.setter
    def signing_algorithms(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "signing_algorithms", value)

    @property
    @pulumi.getter
    def state(self) -> Optional[pulumi.Input[str]]:
        """
        Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        """
        return pulumi.get(self, "state")

    @state.setter
    def state(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "state", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of auth method; hardcoded.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


class BoundaryAuthMethodOidc(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_claim_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url_prefix: Optional[pulumi.Input[str]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 claims_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_secret_hmac: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_discovered_config_validation: Optional[pulumi.Input[bool]] = None,
                 idp_ca_certs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 signing_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The OIDC auth method resource allows you to configure a Boundary auth_method_oidc.

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_claim_maps: Account claim maps for the to_claim of sub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_audiences: Audiences for which the provider responses will be allowed
        :param pulumi.Input[str] api_url_prefix: The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        :param pulumi.Input[str] callback_url: The URL that should be provided to the IdP for callbacks.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] claims_scopes: Claims scopes.
        :param pulumi.Input[str] client_id: The client ID assigned to this auth method from the provider.
        :param pulumi.Input[str] client_secret: The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        :param pulumi.Input[str] client_secret_hmac: The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] disable_discovered_config_validation: Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] idp_ca_certs: A list of CA certificates to trust when validating the IdP's token signatures.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        :param pulumi.Input[str] issuer: The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        :param pulumi.Input[int] max_age: The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] signing_algorithms: Allowed signing algorithms for the provider's issued tokens.
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BoundaryAuthMethodOidcArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The OIDC auth method resource allows you to configure a Boundary auth_method_oidc.

        :param str resource_name: The name of the resource.
        :param BoundaryAuthMethodOidcArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BoundaryAuthMethodOidcArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 account_claim_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 allowed_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 api_url_prefix: Optional[pulumi.Input[str]] = None,
                 callback_url: Optional[pulumi.Input[str]] = None,
                 claims_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 client_id: Optional[pulumi.Input[str]] = None,
                 client_secret: Optional[pulumi.Input[str]] = None,
                 client_secret_hmac: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 disable_discovered_config_validation: Optional[pulumi.Input[bool]] = None,
                 idp_ca_certs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
                 issuer: Optional[pulumi.Input[str]] = None,
                 max_age: Optional[pulumi.Input[int]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 signing_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 state: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BoundaryAuthMethodOidcArgs.__new__(BoundaryAuthMethodOidcArgs)

            __props__.__dict__["account_claim_maps"] = account_claim_maps
            __props__.__dict__["allowed_audiences"] = allowed_audiences
            __props__.__dict__["api_url_prefix"] = api_url_prefix
            __props__.__dict__["callback_url"] = callback_url
            __props__.__dict__["claims_scopes"] = claims_scopes
            __props__.__dict__["client_id"] = client_id
            __props__.__dict__["client_secret"] = client_secret
            __props__.__dict__["client_secret_hmac"] = client_secret_hmac
            __props__.__dict__["description"] = description
            __props__.__dict__["disable_discovered_config_validation"] = disable_discovered_config_validation
            __props__.__dict__["idp_ca_certs"] = idp_ca_certs
            __props__.__dict__["is_primary_for_scope"] = is_primary_for_scope
            __props__.__dict__["issuer"] = issuer
            __props__.__dict__["max_age"] = max_age
            __props__.__dict__["name"] = name
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["signing_algorithms"] = signing_algorithms
            __props__.__dict__["state"] = state
            __props__.__dict__["type"] = type
        super(BoundaryAuthMethodOidc, __self__).__init__(
            'boundary:index/boundaryAuthMethodOidc:BoundaryAuthMethodOidc',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            account_claim_maps: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            allowed_audiences: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            api_url_prefix: Optional[pulumi.Input[str]] = None,
            callback_url: Optional[pulumi.Input[str]] = None,
            claims_scopes: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            client_id: Optional[pulumi.Input[str]] = None,
            client_secret: Optional[pulumi.Input[str]] = None,
            client_secret_hmac: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            disable_discovered_config_validation: Optional[pulumi.Input[bool]] = None,
            idp_ca_certs: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            is_primary_for_scope: Optional[pulumi.Input[bool]] = None,
            issuer: Optional[pulumi.Input[str]] = None,
            max_age: Optional[pulumi.Input[int]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scope_id: Optional[pulumi.Input[str]] = None,
            signing_algorithms: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            state: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None) -> 'BoundaryAuthMethodOidc':
        """
        Get an existing BoundaryAuthMethodOidc resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] account_claim_maps: Account claim maps for the to_claim of sub.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] allowed_audiences: Audiences for which the provider responses will be allowed
        :param pulumi.Input[str] api_url_prefix: The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        :param pulumi.Input[str] callback_url: The URL that should be provided to the IdP for callbacks.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] claims_scopes: Claims scopes.
        :param pulumi.Input[str] client_id: The client ID assigned to this auth method from the provider.
        :param pulumi.Input[str] client_secret: The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        :param pulumi.Input[str] client_secret_hmac: The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        :param pulumi.Input[str] description: The auth method description.
        :param pulumi.Input[bool] disable_discovered_config_validation: Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] idp_ca_certs: A list of CA certificates to trust when validating the IdP's token signatures.
        :param pulumi.Input[bool] is_primary_for_scope: When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        :param pulumi.Input[str] issuer: The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        :param pulumi.Input[int] max_age: The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        :param pulumi.Input[str] name: The auth method name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] signing_algorithms: Allowed signing algorithms for the provider's issued tokens.
        :param pulumi.Input[str] state: Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        :param pulumi.Input[str] type: The type of auth method; hardcoded.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BoundaryAuthMethodOidcState.__new__(_BoundaryAuthMethodOidcState)

        __props__.__dict__["account_claim_maps"] = account_claim_maps
        __props__.__dict__["allowed_audiences"] = allowed_audiences
        __props__.__dict__["api_url_prefix"] = api_url_prefix
        __props__.__dict__["callback_url"] = callback_url
        __props__.__dict__["claims_scopes"] = claims_scopes
        __props__.__dict__["client_id"] = client_id
        __props__.__dict__["client_secret"] = client_secret
        __props__.__dict__["client_secret_hmac"] = client_secret_hmac
        __props__.__dict__["description"] = description
        __props__.__dict__["disable_discovered_config_validation"] = disable_discovered_config_validation
        __props__.__dict__["idp_ca_certs"] = idp_ca_certs
        __props__.__dict__["is_primary_for_scope"] = is_primary_for_scope
        __props__.__dict__["issuer"] = issuer
        __props__.__dict__["max_age"] = max_age
        __props__.__dict__["name"] = name
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["signing_algorithms"] = signing_algorithms
        __props__.__dict__["state"] = state
        __props__.__dict__["type"] = type
        return BoundaryAuthMethodOidc(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="accountClaimMaps")
    def account_claim_maps(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Account claim maps for the to_claim of sub.
        """
        return pulumi.get(self, "account_claim_maps")

    @property
    @pulumi.getter(name="allowedAudiences")
    def allowed_audiences(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Audiences for which the provider responses will be allowed
        """
        return pulumi.get(self, "allowed_audiences")

    @property
    @pulumi.getter(name="apiUrlPrefix")
    def api_url_prefix(self) -> pulumi.Output[Optional[str]]:
        """
        The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
        """
        return pulumi.get(self, "api_url_prefix")

    @property
    @pulumi.getter(name="callbackUrl")
    def callback_url(self) -> pulumi.Output[str]:
        """
        The URL that should be provided to the IdP for callbacks.
        """
        return pulumi.get(self, "callback_url")

    @property
    @pulumi.getter(name="claimsScopes")
    def claims_scopes(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Claims scopes.
        """
        return pulumi.get(self, "claims_scopes")

    @property
    @pulumi.getter(name="clientId")
    def client_id(self) -> pulumi.Output[Optional[str]]:
        """
        The client ID assigned to this auth method from the provider.
        """
        return pulumi.get(self, "client_id")

    @property
    @pulumi.getter(name="clientSecret")
    def client_secret(self) -> pulumi.Output[Optional[str]]:
        """
        The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
        """
        return pulumi.get(self, "client_secret")

    @property
    @pulumi.getter(name="clientSecretHmac")
    def client_secret_hmac(self) -> pulumi.Output[str]:
        """
        The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
        """
        return pulumi.get(self, "client_secret_hmac")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The auth method description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="disableDiscoveredConfigValidation")
    def disable_discovered_config_validation(self) -> pulumi.Output[Optional[bool]]:
        """
        Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
        """
        return pulumi.get(self, "disable_discovered_config_validation")

    @property
    @pulumi.getter(name="idpCaCerts")
    def idp_ca_certs(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of CA certificates to trust when validating the IdP's token signatures.
        """
        return pulumi.get(self, "idp_ca_certs")

    @property
    @pulumi.getter(name="isPrimaryForScope")
    def is_primary_for_scope(self) -> pulumi.Output[Optional[bool]]:
        """
        When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
        """
        return pulumi.get(self, "is_primary_for_scope")

    @property
    @pulumi.getter
    def issuer(self) -> pulumi.Output[Optional[str]]:
        """
        The issuer corresponding to the provider, which must match the issuer field in generated tokens.
        """
        return pulumi.get(self, "issuer")

    @property
    @pulumi.getter(name="maxAge")
    def max_age(self) -> pulumi.Output[Optional[int]]:
        """
        The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
        """
        return pulumi.get(self, "max_age")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The auth method name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[str]:
        """
        The scope ID.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter(name="signingAlgorithms")
    def signing_algorithms(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        Allowed signing algorithms for the provider's issued tokens.
        """
        return pulumi.get(self, "signing_algorithms")

    @property
    @pulumi.getter
    def state(self) -> pulumi.Output[str]:
        """
        Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
        """
        return pulumi.get(self, "state")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of auth method; hardcoded.
        """
        return pulumi.get(self, "type")

