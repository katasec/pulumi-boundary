// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The OIDC auth method resource allows you to configure a Boundary auth_method_oidc.
type BoundaryAuthMethodOidc struct {
	pulumi.CustomResourceState

	// Account claim maps for the toClaim of sub.
	AccountClaimMaps pulumi.StringArrayOutput `pulumi:"accountClaimMaps"`
	// Audiences for which the provider responses will be allowed
	AllowedAudiences pulumi.StringArrayOutput `pulumi:"allowedAudiences"`
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
	ApiUrlPrefix pulumi.StringPtrOutput `pulumi:"apiUrlPrefix"`
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl pulumi.StringOutput `pulumi:"callbackUrl"`
	// Claims scopes.
	ClaimsScopes pulumi.StringArrayOutput `pulumi:"claimsScopes"`
	// The client ID assigned to this auth method from the provider.
	ClientId pulumi.StringPtrOutput `pulumi:"clientId"`
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
	ClientSecret pulumi.StringPtrOutput `pulumi:"clientSecret"`
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientSecretHmac pulumi.StringOutput `pulumi:"clientSecretHmac"`
	// The auth method description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation pulumi.BoolPtrOutput `pulumi:"disableDiscoveredConfigValidation"`
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts pulumi.StringArrayOutput `pulumi:"idpCaCerts"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope pulumi.BoolPtrOutput `pulumi:"isPrimaryForScope"`
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer pulumi.StringPtrOutput `pulumi:"issuer"`
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
	MaxAge pulumi.IntPtrOutput `pulumi:"maxAge"`
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The scope ID.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms pulumi.StringArrayOutput `pulumi:"signingAlgorithms"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State pulumi.StringOutput `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrOutput `pulumi:"type"`
}

// NewBoundaryAuthMethodOidc registers a new resource with the given unique name, arguments, and options.
func NewBoundaryAuthMethodOidc(ctx *pulumi.Context,
	name string, args *BoundaryAuthMethodOidcArgs, opts ...pulumi.ResourceOption) (*BoundaryAuthMethodOidc, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BoundaryAuthMethodOidc
	err := ctx.RegisterResource("boundary:index/boundaryAuthMethodOidc:BoundaryAuthMethodOidc", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBoundaryAuthMethodOidc gets an existing BoundaryAuthMethodOidc resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBoundaryAuthMethodOidc(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BoundaryAuthMethodOidcState, opts ...pulumi.ResourceOption) (*BoundaryAuthMethodOidc, error) {
	var resource BoundaryAuthMethodOidc
	err := ctx.ReadResource("boundary:index/boundaryAuthMethodOidc:BoundaryAuthMethodOidc", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BoundaryAuthMethodOidc resources.
type boundaryAuthMethodOidcState struct {
	// Account claim maps for the toClaim of sub.
	AccountClaimMaps []string `pulumi:"accountClaimMaps"`
	// Audiences for which the provider responses will be allowed
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
	ApiUrlPrefix *string `pulumi:"apiUrlPrefix"`
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// Claims scopes.
	ClaimsScopes []string `pulumi:"claimsScopes"`
	// The client ID assigned to this auth method from the provider.
	ClientId *string `pulumi:"clientId"`
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
	ClientSecret *string `pulumi:"clientSecret"`
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientSecretHmac *string `pulumi:"clientSecretHmac"`
	// The auth method description.
	Description *string `pulumi:"description"`
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation *bool `pulumi:"disableDiscoveredConfigValidation"`
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts []string `pulumi:"idpCaCerts"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope *bool `pulumi:"isPrimaryForScope"`
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer *string `pulumi:"issuer"`
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
	MaxAge *int `pulumi:"maxAge"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId *string `pulumi:"scopeId"`
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms []string `pulumi:"signingAlgorithms"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State *string `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type *string `pulumi:"type"`
}

type BoundaryAuthMethodOidcState struct {
	// Account claim maps for the toClaim of sub.
	AccountClaimMaps pulumi.StringArrayInput
	// Audiences for which the provider responses will be allowed
	AllowedAudiences pulumi.StringArrayInput
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
	ApiUrlPrefix pulumi.StringPtrInput
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl pulumi.StringPtrInput
	// Claims scopes.
	ClaimsScopes pulumi.StringArrayInput
	// The client ID assigned to this auth method from the provider.
	ClientId pulumi.StringPtrInput
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
	ClientSecret pulumi.StringPtrInput
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientSecretHmac pulumi.StringPtrInput
	// The auth method description.
	Description pulumi.StringPtrInput
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation pulumi.BoolPtrInput
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts pulumi.StringArrayInput
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope pulumi.BoolPtrInput
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer pulumi.StringPtrInput
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
	MaxAge pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringPtrInput
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms pulumi.StringArrayInput
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State pulumi.StringPtrInput
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrInput
}

func (BoundaryAuthMethodOidcState) ElementType() reflect.Type {
	return reflect.TypeOf((*boundaryAuthMethodOidcState)(nil)).Elem()
}

type boundaryAuthMethodOidcArgs struct {
	// Account claim maps for the toClaim of sub.
	AccountClaimMaps []string `pulumi:"accountClaimMaps"`
	// Audiences for which the provider responses will be allowed
	AllowedAudiences []string `pulumi:"allowedAudiences"`
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
	ApiUrlPrefix *string `pulumi:"apiUrlPrefix"`
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl *string `pulumi:"callbackUrl"`
	// Claims scopes.
	ClaimsScopes []string `pulumi:"claimsScopes"`
	// The client ID assigned to this auth method from the provider.
	ClientId *string `pulumi:"clientId"`
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
	ClientSecret *string `pulumi:"clientSecret"`
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientSecretHmac *string `pulumi:"clientSecretHmac"`
	// The auth method description.
	Description *string `pulumi:"description"`
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation *bool `pulumi:"disableDiscoveredConfigValidation"`
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts []string `pulumi:"idpCaCerts"`
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope *bool `pulumi:"isPrimaryForScope"`
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer *string `pulumi:"issuer"`
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
	MaxAge *int `pulumi:"maxAge"`
	// The auth method name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The scope ID.
	ScopeId string `pulumi:"scopeId"`
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms []string `pulumi:"signingAlgorithms"`
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State *string `pulumi:"state"`
	// The type of auth method; hardcoded.
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a BoundaryAuthMethodOidc resource.
type BoundaryAuthMethodOidcArgs struct {
	// Account claim maps for the toClaim of sub.
	AccountClaimMaps pulumi.StringArrayInput
	// Audiences for which the provider responses will be allowed
	AllowedAudiences pulumi.StringArrayInput
	// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
	ApiUrlPrefix pulumi.StringPtrInput
	// The URL that should be provided to the IdP for callbacks.
	CallbackUrl pulumi.StringPtrInput
	// Claims scopes.
	ClaimsScopes pulumi.StringArrayInput
	// The client ID assigned to this auth method from the provider.
	ClientId pulumi.StringPtrInput
	// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
	ClientSecret pulumi.StringPtrInput
	// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
	ClientSecretHmac pulumi.StringPtrInput
	// The auth method description.
	Description pulumi.StringPtrInput
	// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
	DisableDiscoveredConfigValidation pulumi.BoolPtrInput
	// A list of CA certificates to trust when validating the IdP's token signatures.
	IdpCaCerts pulumi.StringArrayInput
	// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
	IsPrimaryForScope pulumi.BoolPtrInput
	// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
	Issuer pulumi.StringPtrInput
	// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
	MaxAge pulumi.IntPtrInput
	// The auth method name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The scope ID.
	ScopeId pulumi.StringInput
	// Allowed signing algorithms for the provider's issued tokens.
	SigningAlgorithms pulumi.StringArrayInput
	// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
	State pulumi.StringPtrInput
	// The type of auth method; hardcoded.
	Type pulumi.StringPtrInput
}

func (BoundaryAuthMethodOidcArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*boundaryAuthMethodOidcArgs)(nil)).Elem()
}

type BoundaryAuthMethodOidcInput interface {
	pulumi.Input

	ToBoundaryAuthMethodOidcOutput() BoundaryAuthMethodOidcOutput
	ToBoundaryAuthMethodOidcOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcOutput
}

func (*BoundaryAuthMethodOidc) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundaryAuthMethodOidc)(nil)).Elem()
}

func (i *BoundaryAuthMethodOidc) ToBoundaryAuthMethodOidcOutput() BoundaryAuthMethodOidcOutput {
	return i.ToBoundaryAuthMethodOidcOutputWithContext(context.Background())
}

func (i *BoundaryAuthMethodOidc) ToBoundaryAuthMethodOidcOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryAuthMethodOidcOutput)
}

// BoundaryAuthMethodOidcArrayInput is an input type that accepts BoundaryAuthMethodOidcArray and BoundaryAuthMethodOidcArrayOutput values.
// You can construct a concrete instance of `BoundaryAuthMethodOidcArrayInput` via:
//
//	BoundaryAuthMethodOidcArray{ BoundaryAuthMethodOidcArgs{...} }
type BoundaryAuthMethodOidcArrayInput interface {
	pulumi.Input

	ToBoundaryAuthMethodOidcArrayOutput() BoundaryAuthMethodOidcArrayOutput
	ToBoundaryAuthMethodOidcArrayOutputWithContext(context.Context) BoundaryAuthMethodOidcArrayOutput
}

type BoundaryAuthMethodOidcArray []BoundaryAuthMethodOidcInput

func (BoundaryAuthMethodOidcArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BoundaryAuthMethodOidc)(nil)).Elem()
}

func (i BoundaryAuthMethodOidcArray) ToBoundaryAuthMethodOidcArrayOutput() BoundaryAuthMethodOidcArrayOutput {
	return i.ToBoundaryAuthMethodOidcArrayOutputWithContext(context.Background())
}

func (i BoundaryAuthMethodOidcArray) ToBoundaryAuthMethodOidcArrayOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryAuthMethodOidcArrayOutput)
}

// BoundaryAuthMethodOidcMapInput is an input type that accepts BoundaryAuthMethodOidcMap and BoundaryAuthMethodOidcMapOutput values.
// You can construct a concrete instance of `BoundaryAuthMethodOidcMapInput` via:
//
//	BoundaryAuthMethodOidcMap{ "key": BoundaryAuthMethodOidcArgs{...} }
type BoundaryAuthMethodOidcMapInput interface {
	pulumi.Input

	ToBoundaryAuthMethodOidcMapOutput() BoundaryAuthMethodOidcMapOutput
	ToBoundaryAuthMethodOidcMapOutputWithContext(context.Context) BoundaryAuthMethodOidcMapOutput
}

type BoundaryAuthMethodOidcMap map[string]BoundaryAuthMethodOidcInput

func (BoundaryAuthMethodOidcMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BoundaryAuthMethodOidc)(nil)).Elem()
}

func (i BoundaryAuthMethodOidcMap) ToBoundaryAuthMethodOidcMapOutput() BoundaryAuthMethodOidcMapOutput {
	return i.ToBoundaryAuthMethodOidcMapOutputWithContext(context.Background())
}

func (i BoundaryAuthMethodOidcMap) ToBoundaryAuthMethodOidcMapOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryAuthMethodOidcMapOutput)
}

type BoundaryAuthMethodOidcOutput struct{ *pulumi.OutputState }

func (BoundaryAuthMethodOidcOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundaryAuthMethodOidc)(nil)).Elem()
}

func (o BoundaryAuthMethodOidcOutput) ToBoundaryAuthMethodOidcOutput() BoundaryAuthMethodOidcOutput {
	return o
}

func (o BoundaryAuthMethodOidcOutput) ToBoundaryAuthMethodOidcOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcOutput {
	return o
}

// Account claim maps for the toClaim of sub.
func (o BoundaryAuthMethodOidcOutput) AccountClaimMaps() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringArrayOutput { return v.AccountClaimMaps }).(pulumi.StringArrayOutput)
}

// Audiences for which the provider responses will be allowed
func (o BoundaryAuthMethodOidcOutput) AllowedAudiences() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringArrayOutput { return v.AllowedAudiences }).(pulumi.StringArrayOutput)
}

// The API prefix to use when generating callback URLs for the provider. Should be set to an address at which the provider can reach back to the controller.
func (o BoundaryAuthMethodOidcOutput) ApiUrlPrefix() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringPtrOutput { return v.ApiUrlPrefix }).(pulumi.StringPtrOutput)
}

// The URL that should be provided to the IdP for callbacks.
func (o BoundaryAuthMethodOidcOutput) CallbackUrl() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringOutput { return v.CallbackUrl }).(pulumi.StringOutput)
}

// Claims scopes.
func (o BoundaryAuthMethodOidcOutput) ClaimsScopes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringArrayOutput { return v.ClaimsScopes }).(pulumi.StringArrayOutput)
}

// The client ID assigned to this auth method from the provider.
func (o BoundaryAuthMethodOidcOutput) ClientId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringPtrOutput { return v.ClientId }).(pulumi.StringPtrOutput)
}

// The secret key assigned to this auth method from the provider. Once set, only the hash will be kept and the original value can be removed from configuration.
func (o BoundaryAuthMethodOidcOutput) ClientSecret() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringPtrOutput { return v.ClientSecret }).(pulumi.StringPtrOutput)
}

// The HMAC of the client secret returned by the Boundary controller, which is used for comparison after initial setting of the value.
func (o BoundaryAuthMethodOidcOutput) ClientSecretHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringOutput { return v.ClientSecretHmac }).(pulumi.StringOutput)
}

// The auth method description.
func (o BoundaryAuthMethodOidcOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// Disables validation logic ensuring that the OIDC provider's information from its discovery endpoint matches the information here. The validation is only performed at create or update time.
func (o BoundaryAuthMethodOidcOutput) DisableDiscoveredConfigValidation() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.BoolPtrOutput { return v.DisableDiscoveredConfigValidation }).(pulumi.BoolPtrOutput)
}

// A list of CA certificates to trust when validating the IdP's token signatures.
func (o BoundaryAuthMethodOidcOutput) IdpCaCerts() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringArrayOutput { return v.IdpCaCerts }).(pulumi.StringArrayOutput)
}

// When true, makes this auth method the primary auth method for the scope in which it resides. The primary auth method for a scope means the the user will be automatically created when they login using an OIDC account.
func (o BoundaryAuthMethodOidcOutput) IsPrimaryForScope() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.BoolPtrOutput { return v.IsPrimaryForScope }).(pulumi.BoolPtrOutput)
}

// The issuer corresponding to the provider, which must match the issuer field in generated tokens.
func (o BoundaryAuthMethodOidcOutput) Issuer() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringPtrOutput { return v.Issuer }).(pulumi.StringPtrOutput)
}

// The max age to provide to the provider, indicating how much time is allowed to have passed since the last authentication before the user is challenged again.
func (o BoundaryAuthMethodOidcOutput) MaxAge() pulumi.IntPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.IntPtrOutput { return v.MaxAge }).(pulumi.IntPtrOutput)
}

// The auth method name. Defaults to the resource name.
func (o BoundaryAuthMethodOidcOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The scope ID.
func (o BoundaryAuthMethodOidcOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// Allowed signing algorithms for the provider's issued tokens.
func (o BoundaryAuthMethodOidcOutput) SigningAlgorithms() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringArrayOutput { return v.SigningAlgorithms }).(pulumi.StringArrayOutput)
}

// Can be one of 'inactive', 'active-private', or 'active-public'. Currently automatically set to active-public.
func (o BoundaryAuthMethodOidcOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// The type of auth method; hardcoded.
func (o BoundaryAuthMethodOidcOutput) Type() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryAuthMethodOidc) pulumi.StringPtrOutput { return v.Type }).(pulumi.StringPtrOutput)
}

type BoundaryAuthMethodOidcArrayOutput struct{ *pulumi.OutputState }

func (BoundaryAuthMethodOidcArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BoundaryAuthMethodOidc)(nil)).Elem()
}

func (o BoundaryAuthMethodOidcArrayOutput) ToBoundaryAuthMethodOidcArrayOutput() BoundaryAuthMethodOidcArrayOutput {
	return o
}

func (o BoundaryAuthMethodOidcArrayOutput) ToBoundaryAuthMethodOidcArrayOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcArrayOutput {
	return o
}

func (o BoundaryAuthMethodOidcArrayOutput) Index(i pulumi.IntInput) BoundaryAuthMethodOidcOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BoundaryAuthMethodOidc {
		return vs[0].([]*BoundaryAuthMethodOidc)[vs[1].(int)]
	}).(BoundaryAuthMethodOidcOutput)
}

type BoundaryAuthMethodOidcMapOutput struct{ *pulumi.OutputState }

func (BoundaryAuthMethodOidcMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BoundaryAuthMethodOidc)(nil)).Elem()
}

func (o BoundaryAuthMethodOidcMapOutput) ToBoundaryAuthMethodOidcMapOutput() BoundaryAuthMethodOidcMapOutput {
	return o
}

func (o BoundaryAuthMethodOidcMapOutput) ToBoundaryAuthMethodOidcMapOutputWithContext(ctx context.Context) BoundaryAuthMethodOidcMapOutput {
	return o
}

func (o BoundaryAuthMethodOidcMapOutput) MapIndex(k pulumi.StringInput) BoundaryAuthMethodOidcOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BoundaryAuthMethodOidc {
		return vs[0].(map[string]*BoundaryAuthMethodOidc)[vs[1].(string)]
	}).(BoundaryAuthMethodOidcOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryAuthMethodOidcInput)(nil)).Elem(), &BoundaryAuthMethodOidc{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryAuthMethodOidcArrayInput)(nil)).Elem(), BoundaryAuthMethodOidcArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryAuthMethodOidcMapInput)(nil)).Elem(), BoundaryAuthMethodOidcMap{})
	pulumi.RegisterOutputType(BoundaryAuthMethodOidcOutput{})
	pulumi.RegisterOutputType(BoundaryAuthMethodOidcArrayOutput{})
	pulumi.RegisterOutputType(BoundaryAuthMethodOidcMapOutput{})
}
