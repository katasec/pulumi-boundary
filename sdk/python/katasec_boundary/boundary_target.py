# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BoundaryTargetArgs', 'BoundaryTarget']

@pulumi.input_type
class BoundaryTargetArgs:
    def __init__(__self__, *,
                 scope_id: pulumi.Input[str],
                 type: pulumi.Input[str],
                 brokered_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 injected_application_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 session_connection_limit: Optional[pulumi.Input[int]] = None,
                 session_max_seconds: Optional[pulumi.Input[int]] = None,
                 worker_filter: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BoundaryTarget resource.
        :param pulumi.Input[str] scope_id: The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        :param pulumi.Input[str] type: The target resource type.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] brokered_credential_source_ids: A list of brokered credential source ID's.
        :param pulumi.Input[int] default_port: The default port for this target.
        :param pulumi.Input[str] description: The target description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_source_ids: A list of host source ID's.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] injected_application_credential_source_ids: A list of injected application credential source ID's.
        :param pulumi.Input[str] name: The target name. Defaults to the resource name.
        :param pulumi.Input[str] worker_filter: Boolean expression to filter the workers for this target
        """
        pulumi.set(__self__, "scope_id", scope_id)
        pulumi.set(__self__, "type", type)
        if brokered_credential_source_ids is not None:
            pulumi.set(__self__, "brokered_credential_source_ids", brokered_credential_source_ids)
        if default_port is not None:
            pulumi.set(__self__, "default_port", default_port)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_source_ids is not None:
            pulumi.set(__self__, "host_source_ids", host_source_ids)
        if injected_application_credential_source_ids is not None:
            pulumi.set(__self__, "injected_application_credential_source_ids", injected_application_credential_source_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if session_connection_limit is not None:
            pulumi.set(__self__, "session_connection_limit", session_connection_limit)
        if session_max_seconds is not None:
            pulumi.set(__self__, "session_max_seconds", session_max_seconds)
        if worker_filter is not None:
            pulumi.set(__self__, "worker_filter", worker_filter)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Input[str]:
        """
        The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter
    def type(self) -> pulumi.Input[str]:
        """
        The target resource type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: pulumi.Input[str]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="brokeredCredentialSourceIds")
    def brokered_credential_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of brokered credential source ID's.
        """
        return pulumi.get(self, "brokered_credential_source_ids")

    @brokered_credential_source_ids.setter
    def brokered_credential_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "brokered_credential_source_ids", value)

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> Optional[pulumi.Input[int]]:
        """
        The default port for this target.
        """
        return pulumi.get(self, "default_port")

    @default_port.setter
    def default_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_port", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The target description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostSourceIds")
    def host_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of host source ID's.
        """
        return pulumi.get(self, "host_source_ids")

    @host_source_ids.setter
    def host_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_source_ids", value)

    @property
    @pulumi.getter(name="injectedApplicationCredentialSourceIds")
    def injected_application_credential_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of injected application credential source ID's.
        """
        return pulumi.get(self, "injected_application_credential_source_ids")

    @injected_application_credential_source_ids.setter
    def injected_application_credential_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "injected_application_credential_source_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The target name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sessionConnectionLimit")
    def session_connection_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_connection_limit")

    @session_connection_limit.setter
    def session_connection_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_connection_limit", value)

    @property
    @pulumi.getter(name="sessionMaxSeconds")
    def session_max_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_max_seconds")

    @session_max_seconds.setter
    def session_max_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_max_seconds", value)

    @property
    @pulumi.getter(name="workerFilter")
    def worker_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Boolean expression to filter the workers for this target
        """
        return pulumi.get(self, "worker_filter")

    @worker_filter.setter
    def worker_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_filter", value)


@pulumi.input_type
class _BoundaryTargetState:
    def __init__(__self__, *,
                 brokered_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 injected_application_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 session_connection_limit: Optional[pulumi.Input[int]] = None,
                 session_max_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_filter: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BoundaryTarget resources.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] brokered_credential_source_ids: A list of brokered credential source ID's.
        :param pulumi.Input[int] default_port: The default port for this target.
        :param pulumi.Input[str] description: The target description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_source_ids: A list of host source ID's.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] injected_application_credential_source_ids: A list of injected application credential source ID's.
        :param pulumi.Input[str] name: The target name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        :param pulumi.Input[str] type: The target resource type.
        :param pulumi.Input[str] worker_filter: Boolean expression to filter the workers for this target
        """
        if brokered_credential_source_ids is not None:
            pulumi.set(__self__, "brokered_credential_source_ids", brokered_credential_source_ids)
        if default_port is not None:
            pulumi.set(__self__, "default_port", default_port)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if host_source_ids is not None:
            pulumi.set(__self__, "host_source_ids", host_source_ids)
        if injected_application_credential_source_ids is not None:
            pulumi.set(__self__, "injected_application_credential_source_ids", injected_application_credential_source_ids)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if scope_id is not None:
            pulumi.set(__self__, "scope_id", scope_id)
        if session_connection_limit is not None:
            pulumi.set(__self__, "session_connection_limit", session_connection_limit)
        if session_max_seconds is not None:
            pulumi.set(__self__, "session_max_seconds", session_max_seconds)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if worker_filter is not None:
            pulumi.set(__self__, "worker_filter", worker_filter)

    @property
    @pulumi.getter(name="brokeredCredentialSourceIds")
    def brokered_credential_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of brokered credential source ID's.
        """
        return pulumi.get(self, "brokered_credential_source_ids")

    @brokered_credential_source_ids.setter
    def brokered_credential_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "brokered_credential_source_ids", value)

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> Optional[pulumi.Input[int]]:
        """
        The default port for this target.
        """
        return pulumi.get(self, "default_port")

    @default_port.setter
    def default_port(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "default_port", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The target description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="hostSourceIds")
    def host_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of host source ID's.
        """
        return pulumi.get(self, "host_source_ids")

    @host_source_ids.setter
    def host_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "host_source_ids", value)

    @property
    @pulumi.getter(name="injectedApplicationCredentialSourceIds")
    def injected_application_credential_source_ids(self) -> Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]:
        """
        A list of injected application credential source ID's.
        """
        return pulumi.get(self, "injected_application_credential_source_ids")

    @injected_application_credential_source_ids.setter
    def injected_application_credential_source_ids(self, value: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]]):
        pulumi.set(self, "injected_application_credential_source_ids", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The target name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> Optional[pulumi.Input[str]]:
        """
        The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        """
        return pulumi.get(self, "scope_id")

    @scope_id.setter
    def scope_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "scope_id", value)

    @property
    @pulumi.getter(name="sessionConnectionLimit")
    def session_connection_limit(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_connection_limit")

    @session_connection_limit.setter
    def session_connection_limit(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_connection_limit", value)

    @property
    @pulumi.getter(name="sessionMaxSeconds")
    def session_max_seconds(self) -> Optional[pulumi.Input[int]]:
        return pulumi.get(self, "session_max_seconds")

    @session_max_seconds.setter
    def session_max_seconds(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "session_max_seconds", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        The target resource type.
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter(name="workerFilter")
    def worker_filter(self) -> Optional[pulumi.Input[str]]:
        """
        Boolean expression to filter the workers for this target
        """
        return pulumi.get(self, "worker_filter")

    @worker_filter.setter
    def worker_filter(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "worker_filter", value)


class BoundaryTarget(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 brokered_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 injected_application_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 session_connection_limit: Optional[pulumi.Input[int]] = None,
                 session_max_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_filter: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The target resource allows you to configure a Boundary target.

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryTarget:BoundaryTarget foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] brokered_credential_source_ids: A list of brokered credential source ID's.
        :param pulumi.Input[int] default_port: The default port for this target.
        :param pulumi.Input[str] description: The target description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_source_ids: A list of host source ID's.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] injected_application_credential_source_ids: A list of injected application credential source ID's.
        :param pulumi.Input[str] name: The target name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        :param pulumi.Input[str] type: The target resource type.
        :param pulumi.Input[str] worker_filter: Boolean expression to filter the workers for this target
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BoundaryTargetArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The target resource allows you to configure a Boundary target.

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryTarget:BoundaryTarget foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param BoundaryTargetArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BoundaryTargetArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 brokered_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 default_port: Optional[pulumi.Input[int]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 host_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 injected_application_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 scope_id: Optional[pulumi.Input[str]] = None,
                 session_connection_limit: Optional[pulumi.Input[int]] = None,
                 session_max_seconds: Optional[pulumi.Input[int]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 worker_filter: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BoundaryTargetArgs.__new__(BoundaryTargetArgs)

            __props__.__dict__["brokered_credential_source_ids"] = brokered_credential_source_ids
            __props__.__dict__["default_port"] = default_port
            __props__.__dict__["description"] = description
            __props__.__dict__["host_source_ids"] = host_source_ids
            __props__.__dict__["injected_application_credential_source_ids"] = injected_application_credential_source_ids
            __props__.__dict__["name"] = name
            if scope_id is None and not opts.urn:
                raise TypeError("Missing required property 'scope_id'")
            __props__.__dict__["scope_id"] = scope_id
            __props__.__dict__["session_connection_limit"] = session_connection_limit
            __props__.__dict__["session_max_seconds"] = session_max_seconds
            if type is None and not opts.urn:
                raise TypeError("Missing required property 'type'")
            __props__.__dict__["type"] = type
            __props__.__dict__["worker_filter"] = worker_filter
        super(BoundaryTarget, __self__).__init__(
            'boundary:index/boundaryTarget:BoundaryTarget',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            brokered_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            default_port: Optional[pulumi.Input[int]] = None,
            description: Optional[pulumi.Input[str]] = None,
            host_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            injected_application_credential_source_ids: Optional[pulumi.Input[Sequence[pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            scope_id: Optional[pulumi.Input[str]] = None,
            session_connection_limit: Optional[pulumi.Input[int]] = None,
            session_max_seconds: Optional[pulumi.Input[int]] = None,
            type: Optional[pulumi.Input[str]] = None,
            worker_filter: Optional[pulumi.Input[str]] = None) -> 'BoundaryTarget':
        """
        Get an existing BoundaryTarget resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] brokered_credential_source_ids: A list of brokered credential source ID's.
        :param pulumi.Input[int] default_port: The default port for this target.
        :param pulumi.Input[str] description: The target description.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] host_source_ids: A list of host source ID's.
        :param pulumi.Input[Sequence[pulumi.Input[str]]] injected_application_credential_source_ids: A list of injected application credential source ID's.
        :param pulumi.Input[str] name: The target name. Defaults to the resource name.
        :param pulumi.Input[str] scope_id: The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        :param pulumi.Input[str] type: The target resource type.
        :param pulumi.Input[str] worker_filter: Boolean expression to filter the workers for this target
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BoundaryTargetState.__new__(_BoundaryTargetState)

        __props__.__dict__["brokered_credential_source_ids"] = brokered_credential_source_ids
        __props__.__dict__["default_port"] = default_port
        __props__.__dict__["description"] = description
        __props__.__dict__["host_source_ids"] = host_source_ids
        __props__.__dict__["injected_application_credential_source_ids"] = injected_application_credential_source_ids
        __props__.__dict__["name"] = name
        __props__.__dict__["scope_id"] = scope_id
        __props__.__dict__["session_connection_limit"] = session_connection_limit
        __props__.__dict__["session_max_seconds"] = session_max_seconds
        __props__.__dict__["type"] = type
        __props__.__dict__["worker_filter"] = worker_filter
        return BoundaryTarget(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="brokeredCredentialSourceIds")
    def brokered_credential_source_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of brokered credential source ID's.
        """
        return pulumi.get(self, "brokered_credential_source_ids")

    @property
    @pulumi.getter(name="defaultPort")
    def default_port(self) -> pulumi.Output[Optional[int]]:
        """
        The default port for this target.
        """
        return pulumi.get(self, "default_port")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The target description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="hostSourceIds")
    def host_source_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of host source ID's.
        """
        return pulumi.get(self, "host_source_ids")

    @property
    @pulumi.getter(name="injectedApplicationCredentialSourceIds")
    def injected_application_credential_source_ids(self) -> pulumi.Output[Optional[Sequence[str]]]:
        """
        A list of injected application credential source ID's.
        """
        return pulumi.get(self, "injected_application_credential_source_ids")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The target name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="scopeId")
    def scope_id(self) -> pulumi.Output[str]:
        """
        The scope ID in which the resource is created. Defaults to the provider's `default_scope` if unset.
        """
        return pulumi.get(self, "scope_id")

    @property
    @pulumi.getter(name="sessionConnectionLimit")
    def session_connection_limit(self) -> pulumi.Output[int]:
        return pulumi.get(self, "session_connection_limit")

    @property
    @pulumi.getter(name="sessionMaxSeconds")
    def session_max_seconds(self) -> pulumi.Output[int]:
        return pulumi.get(self, "session_max_seconds")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[str]:
        """
        The target resource type.
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter(name="workerFilter")
    def worker_filter(self) -> pulumi.Output[Optional[str]]:
        """
        Boolean expression to filter the workers for this target
        """
        return pulumi.get(self, "worker_filter")

