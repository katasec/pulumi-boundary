// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package boundary

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// The credential store for Vault resource allows you to configure a Boundary credential store for Vault.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/katasec/pulumi-boundary/sdk/go/boundary"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			org, err := boundary.NewBoundaryScope(ctx, "org", &boundary.BoundaryScopeArgs{
//				Description:           pulumi.String("My first scope!"),
//				ScopeId:               pulumi.String("global"),
//				AutoCreateAdminRole:   pulumi.Bool(true),
//				AutoCreateDefaultRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			project, err := boundary.NewBoundaryScope(ctx, "project", &boundary.BoundaryScopeArgs{
//				Description:         pulumi.String("My first scope!"),
//				ScopeId:             org.ID(),
//				AutoCreateAdminRole: pulumi.Bool(true),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = boundary.NewBoundaryCredentialStoreVault(ctx, "example", &boundary.BoundaryCredentialStoreVaultArgs{
//				Description: pulumi.String("My first Vault credential store!"),
//				Address:     pulumi.String("http://127.0.0.1:8200"),
//				Token:       pulumi.String("s.0ufRo6XEGU2jOqnIr7OlFYP5"),
//				ScopeId:     project.ID(),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// ```sh
//
//	$ pulumi import boundary:index/boundaryCredentialStoreVault:BoundaryCredentialStoreVault foo <my-id>
//
// ```
type BoundaryCredentialStoreVault struct {
	pulumi.CustomResourceState

	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address pulumi.StringOutput `pulumi:"address"`
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert pulumi.StringPtrOutput `pulumi:"caCert"`
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate pulumi.StringPtrOutput `pulumi:"clientCertificate"`
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey pulumi.StringPtrOutput `pulumi:"clientCertificateKey"`
	// The Vault client certificate key hmac.
	ClientCertificateKeyHmac pulumi.StringOutput `pulumi:"clientCertificateKeyHmac"`
	// The Vault credential store description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The Vault credential store name. Defaults to the resource name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The namespace within Vault to use.
	Namespace pulumi.StringPtrOutput `pulumi:"namespace"`
	// The scope for this credential store.
	ScopeId pulumi.StringOutput `pulumi:"scopeId"`
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName pulumi.StringPtrOutput `pulumi:"tlsServerName"`
	// Whether or not to skip TLS verification.
	TlsSkipVerify pulumi.BoolPtrOutput `pulumi:"tlsSkipVerify"`
	// A token used for accessing Vault.
	Token pulumi.StringOutput `pulumi:"token"`
	// The Vault token hmac.
	TokenHmac pulumi.StringOutput `pulumi:"tokenHmac"`
}

// NewBoundaryCredentialStoreVault registers a new resource with the given unique name, arguments, and options.
func NewBoundaryCredentialStoreVault(ctx *pulumi.Context,
	name string, args *BoundaryCredentialStoreVaultArgs, opts ...pulumi.ResourceOption) (*BoundaryCredentialStoreVault, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Address == nil {
		return nil, errors.New("invalid value for required argument 'Address'")
	}
	if args.ScopeId == nil {
		return nil, errors.New("invalid value for required argument 'ScopeId'")
	}
	if args.Token == nil {
		return nil, errors.New("invalid value for required argument 'Token'")
	}
	opts = pkgResourceDefaultOpts(opts)
	var resource BoundaryCredentialStoreVault
	err := ctx.RegisterResource("boundary:index/boundaryCredentialStoreVault:BoundaryCredentialStoreVault", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBoundaryCredentialStoreVault gets an existing BoundaryCredentialStoreVault resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBoundaryCredentialStoreVault(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BoundaryCredentialStoreVaultState, opts ...pulumi.ResourceOption) (*BoundaryCredentialStoreVault, error) {
	var resource BoundaryCredentialStoreVault
	err := ctx.ReadResource("boundary:index/boundaryCredentialStoreVault:BoundaryCredentialStoreVault", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BoundaryCredentialStoreVault resources.
type boundaryCredentialStoreVaultState struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address *string `pulumi:"address"`
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert *string `pulumi:"caCert"`
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey *string `pulumi:"clientCertificateKey"`
	// The Vault client certificate key hmac.
	ClientCertificateKeyHmac *string `pulumi:"clientCertificateKeyHmac"`
	// The Vault credential store description.
	Description *string `pulumi:"description"`
	// The Vault credential store name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The namespace within Vault to use.
	Namespace *string `pulumi:"namespace"`
	// The scope for this credential store.
	ScopeId *string `pulumi:"scopeId"`
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName *string `pulumi:"tlsServerName"`
	// Whether or not to skip TLS verification.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// A token used for accessing Vault.
	Token *string `pulumi:"token"`
	// The Vault token hmac.
	TokenHmac *string `pulumi:"tokenHmac"`
}

type BoundaryCredentialStoreVaultState struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address pulumi.StringPtrInput
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert pulumi.StringPtrInput
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate pulumi.StringPtrInput
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey pulumi.StringPtrInput
	// The Vault client certificate key hmac.
	ClientCertificateKeyHmac pulumi.StringPtrInput
	// The Vault credential store description.
	Description pulumi.StringPtrInput
	// The Vault credential store name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The namespace within Vault to use.
	Namespace pulumi.StringPtrInput
	// The scope for this credential store.
	ScopeId pulumi.StringPtrInput
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName pulumi.StringPtrInput
	// Whether or not to skip TLS verification.
	TlsSkipVerify pulumi.BoolPtrInput
	// A token used for accessing Vault.
	Token pulumi.StringPtrInput
	// The Vault token hmac.
	TokenHmac pulumi.StringPtrInput
}

func (BoundaryCredentialStoreVaultState) ElementType() reflect.Type {
	return reflect.TypeOf((*boundaryCredentialStoreVaultState)(nil)).Elem()
}

type boundaryCredentialStoreVaultArgs struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address string `pulumi:"address"`
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert *string `pulumi:"caCert"`
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate *string `pulumi:"clientCertificate"`
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey *string `pulumi:"clientCertificateKey"`
	// The Vault credential store description.
	Description *string `pulumi:"description"`
	// The Vault credential store name. Defaults to the resource name.
	Name *string `pulumi:"name"`
	// The namespace within Vault to use.
	Namespace *string `pulumi:"namespace"`
	// The scope for this credential store.
	ScopeId string `pulumi:"scopeId"`
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName *string `pulumi:"tlsServerName"`
	// Whether or not to skip TLS verification.
	TlsSkipVerify *bool `pulumi:"tlsSkipVerify"`
	// A token used for accessing Vault.
	Token string `pulumi:"token"`
}

// The set of arguments for constructing a BoundaryCredentialStoreVault resource.
type BoundaryCredentialStoreVaultArgs struct {
	// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
	Address pulumi.StringInput
	// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
	CaCert pulumi.StringPtrInput
	// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
	ClientCertificate pulumi.StringPtrInput
	// A PEM-encoded private key matching the client certificate from 'client_certificate'.
	ClientCertificateKey pulumi.StringPtrInput
	// The Vault credential store description.
	Description pulumi.StringPtrInput
	// The Vault credential store name. Defaults to the resource name.
	Name pulumi.StringPtrInput
	// The namespace within Vault to use.
	Namespace pulumi.StringPtrInput
	// The scope for this credential store.
	ScopeId pulumi.StringInput
	// Name to use as the SNI host when connecting to Vault via TLS.
	TlsServerName pulumi.StringPtrInput
	// Whether or not to skip TLS verification.
	TlsSkipVerify pulumi.BoolPtrInput
	// A token used for accessing Vault.
	Token pulumi.StringInput
}

func (BoundaryCredentialStoreVaultArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*boundaryCredentialStoreVaultArgs)(nil)).Elem()
}

type BoundaryCredentialStoreVaultInput interface {
	pulumi.Input

	ToBoundaryCredentialStoreVaultOutput() BoundaryCredentialStoreVaultOutput
	ToBoundaryCredentialStoreVaultOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultOutput
}

func (*BoundaryCredentialStoreVault) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundaryCredentialStoreVault)(nil)).Elem()
}

func (i *BoundaryCredentialStoreVault) ToBoundaryCredentialStoreVaultOutput() BoundaryCredentialStoreVaultOutput {
	return i.ToBoundaryCredentialStoreVaultOutputWithContext(context.Background())
}

func (i *BoundaryCredentialStoreVault) ToBoundaryCredentialStoreVaultOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryCredentialStoreVaultOutput)
}

// BoundaryCredentialStoreVaultArrayInput is an input type that accepts BoundaryCredentialStoreVaultArray and BoundaryCredentialStoreVaultArrayOutput values.
// You can construct a concrete instance of `BoundaryCredentialStoreVaultArrayInput` via:
//
//	BoundaryCredentialStoreVaultArray{ BoundaryCredentialStoreVaultArgs{...} }
type BoundaryCredentialStoreVaultArrayInput interface {
	pulumi.Input

	ToBoundaryCredentialStoreVaultArrayOutput() BoundaryCredentialStoreVaultArrayOutput
	ToBoundaryCredentialStoreVaultArrayOutputWithContext(context.Context) BoundaryCredentialStoreVaultArrayOutput
}

type BoundaryCredentialStoreVaultArray []BoundaryCredentialStoreVaultInput

func (BoundaryCredentialStoreVaultArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BoundaryCredentialStoreVault)(nil)).Elem()
}

func (i BoundaryCredentialStoreVaultArray) ToBoundaryCredentialStoreVaultArrayOutput() BoundaryCredentialStoreVaultArrayOutput {
	return i.ToBoundaryCredentialStoreVaultArrayOutputWithContext(context.Background())
}

func (i BoundaryCredentialStoreVaultArray) ToBoundaryCredentialStoreVaultArrayOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryCredentialStoreVaultArrayOutput)
}

// BoundaryCredentialStoreVaultMapInput is an input type that accepts BoundaryCredentialStoreVaultMap and BoundaryCredentialStoreVaultMapOutput values.
// You can construct a concrete instance of `BoundaryCredentialStoreVaultMapInput` via:
//
//	BoundaryCredentialStoreVaultMap{ "key": BoundaryCredentialStoreVaultArgs{...} }
type BoundaryCredentialStoreVaultMapInput interface {
	pulumi.Input

	ToBoundaryCredentialStoreVaultMapOutput() BoundaryCredentialStoreVaultMapOutput
	ToBoundaryCredentialStoreVaultMapOutputWithContext(context.Context) BoundaryCredentialStoreVaultMapOutput
}

type BoundaryCredentialStoreVaultMap map[string]BoundaryCredentialStoreVaultInput

func (BoundaryCredentialStoreVaultMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BoundaryCredentialStoreVault)(nil)).Elem()
}

func (i BoundaryCredentialStoreVaultMap) ToBoundaryCredentialStoreVaultMapOutput() BoundaryCredentialStoreVaultMapOutput {
	return i.ToBoundaryCredentialStoreVaultMapOutputWithContext(context.Background())
}

func (i BoundaryCredentialStoreVaultMap) ToBoundaryCredentialStoreVaultMapOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BoundaryCredentialStoreVaultMapOutput)
}

type BoundaryCredentialStoreVaultOutput struct{ *pulumi.OutputState }

func (BoundaryCredentialStoreVaultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BoundaryCredentialStoreVault)(nil)).Elem()
}

func (o BoundaryCredentialStoreVaultOutput) ToBoundaryCredentialStoreVaultOutput() BoundaryCredentialStoreVaultOutput {
	return o
}

func (o BoundaryCredentialStoreVaultOutput) ToBoundaryCredentialStoreVaultOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultOutput {
	return o
}

// The address to Vault server. This should be a complete URL such as 'https://127.0.0.1:8200'
func (o BoundaryCredentialStoreVaultOutput) Address() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringOutput { return v.Address }).(pulumi.StringOutput)
}

// A PEM-encoded CA certificate to verify the Vault server's TLS certificate.
func (o BoundaryCredentialStoreVaultOutput) CaCert() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringPtrOutput { return v.CaCert }).(pulumi.StringPtrOutput)
}

// A PEM-encoded client certificate to use for TLS authentication to the Vault server.
func (o BoundaryCredentialStoreVaultOutput) ClientCertificate() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringPtrOutput { return v.ClientCertificate }).(pulumi.StringPtrOutput)
}

// A PEM-encoded private key matching the client certificate from 'client_certificate'.
func (o BoundaryCredentialStoreVaultOutput) ClientCertificateKey() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringPtrOutput { return v.ClientCertificateKey }).(pulumi.StringPtrOutput)
}

// The Vault client certificate key hmac.
func (o BoundaryCredentialStoreVaultOutput) ClientCertificateKeyHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringOutput { return v.ClientCertificateKeyHmac }).(pulumi.StringOutput)
}

// The Vault credential store description.
func (o BoundaryCredentialStoreVaultOutput) Description() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringPtrOutput { return v.Description }).(pulumi.StringPtrOutput)
}

// The Vault credential store name. Defaults to the resource name.
func (o BoundaryCredentialStoreVaultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The namespace within Vault to use.
func (o BoundaryCredentialStoreVaultOutput) Namespace() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringPtrOutput { return v.Namespace }).(pulumi.StringPtrOutput)
}

// The scope for this credential store.
func (o BoundaryCredentialStoreVaultOutput) ScopeId() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringOutput { return v.ScopeId }).(pulumi.StringOutput)
}

// Name to use as the SNI host when connecting to Vault via TLS.
func (o BoundaryCredentialStoreVaultOutput) TlsServerName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringPtrOutput { return v.TlsServerName }).(pulumi.StringPtrOutput)
}

// Whether or not to skip TLS verification.
func (o BoundaryCredentialStoreVaultOutput) TlsSkipVerify() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.BoolPtrOutput { return v.TlsSkipVerify }).(pulumi.BoolPtrOutput)
}

// A token used for accessing Vault.
func (o BoundaryCredentialStoreVaultOutput) Token() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringOutput { return v.Token }).(pulumi.StringOutput)
}

// The Vault token hmac.
func (o BoundaryCredentialStoreVaultOutput) TokenHmac() pulumi.StringOutput {
	return o.ApplyT(func(v *BoundaryCredentialStoreVault) pulumi.StringOutput { return v.TokenHmac }).(pulumi.StringOutput)
}

type BoundaryCredentialStoreVaultArrayOutput struct{ *pulumi.OutputState }

func (BoundaryCredentialStoreVaultArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BoundaryCredentialStoreVault)(nil)).Elem()
}

func (o BoundaryCredentialStoreVaultArrayOutput) ToBoundaryCredentialStoreVaultArrayOutput() BoundaryCredentialStoreVaultArrayOutput {
	return o
}

func (o BoundaryCredentialStoreVaultArrayOutput) ToBoundaryCredentialStoreVaultArrayOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultArrayOutput {
	return o
}

func (o BoundaryCredentialStoreVaultArrayOutput) Index(i pulumi.IntInput) BoundaryCredentialStoreVaultOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *BoundaryCredentialStoreVault {
		return vs[0].([]*BoundaryCredentialStoreVault)[vs[1].(int)]
	}).(BoundaryCredentialStoreVaultOutput)
}

type BoundaryCredentialStoreVaultMapOutput struct{ *pulumi.OutputState }

func (BoundaryCredentialStoreVaultMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BoundaryCredentialStoreVault)(nil)).Elem()
}

func (o BoundaryCredentialStoreVaultMapOutput) ToBoundaryCredentialStoreVaultMapOutput() BoundaryCredentialStoreVaultMapOutput {
	return o
}

func (o BoundaryCredentialStoreVaultMapOutput) ToBoundaryCredentialStoreVaultMapOutputWithContext(ctx context.Context) BoundaryCredentialStoreVaultMapOutput {
	return o
}

func (o BoundaryCredentialStoreVaultMapOutput) MapIndex(k pulumi.StringInput) BoundaryCredentialStoreVaultOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *BoundaryCredentialStoreVault {
		return vs[0].(map[string]*BoundaryCredentialStoreVault)[vs[1].(string)]
	}).(BoundaryCredentialStoreVaultOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryCredentialStoreVaultInput)(nil)).Elem(), &BoundaryCredentialStoreVault{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryCredentialStoreVaultArrayInput)(nil)).Elem(), BoundaryCredentialStoreVaultArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*BoundaryCredentialStoreVaultMapInput)(nil)).Elem(), BoundaryCredentialStoreVaultMap{})
	pulumi.RegisterOutputType(BoundaryCredentialStoreVaultOutput{})
	pulumi.RegisterOutputType(BoundaryCredentialStoreVaultArrayOutput{})
	pulumi.RegisterOutputType(BoundaryCredentialStoreVaultMapOutput{})
}
