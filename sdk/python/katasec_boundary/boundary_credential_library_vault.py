# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['BoundaryCredentialLibraryVaultArgs', 'BoundaryCredentialLibraryVault']

@pulumi.input_type
class BoundaryCredentialLibraryVaultArgs:
    def __init__(__self__, *,
                 credential_store_id: pulumi.Input[str],
                 path: pulumi.Input[str],
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a BoundaryCredentialLibraryVault resource.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        :param pulumi.Input[str] credential_type: The type of credential the library generates.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[str] http_method: The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        :param pulumi.Input[str] http_request_body: The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        """
        pulumi.set(__self__, "credential_store_id", credential_store_id)
        pulumi.set(__self__, "path", path)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_request_body is not None:
            pulumi.set(__self__, "http_request_body", http_request_body)
        if name is not None:
            pulumi.set(__self__, "name", name)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Input[str]:
        """
        The ID of the credential store that this library belongs to.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter
    def path(self) -> pulumi.Input[str]:
        """
        The path in Vault to request credentials from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: pulumi.Input[str]):
        pulumi.set(self, "path", value)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of credential the library generates.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> Optional[pulumi.Input[str]]:
        """
        The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        """
        return pulumi.get(self, "http_request_body")

    @http_request_body.setter
    def http_request_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_request_body", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)


@pulumi.input_type
class _BoundaryCredentialLibraryVaultState:
    def __init__(__self__, *,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering BoundaryCredentialLibraryVault resources.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[str] credential_type: The type of credential the library generates.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[str] http_method: The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        :param pulumi.Input[str] http_request_body: The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        """
        if credential_store_id is not None:
            pulumi.set(__self__, "credential_store_id", credential_store_id)
        if credential_type is not None:
            pulumi.set(__self__, "credential_type", credential_type)
        if description is not None:
            pulumi.set(__self__, "description", description)
        if http_method is not None:
            pulumi.set(__self__, "http_method", http_method)
        if http_request_body is not None:
            pulumi.set(__self__, "http_request_body", http_request_body)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if path is not None:
            pulumi.set(__self__, "path", path)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> Optional[pulumi.Input[str]]:
        """
        The ID of the credential store that this library belongs to.
        """
        return pulumi.get(self, "credential_store_id")

    @credential_store_id.setter
    def credential_store_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_store_id", value)

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> Optional[pulumi.Input[str]]:
        """
        The type of credential the library generates.
        """
        return pulumi.get(self, "credential_type")

    @credential_type.setter
    def credential_type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "credential_type", value)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library description.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> Optional[pulumi.Input[str]]:
        """
        The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        """
        return pulumi.get(self, "http_method")

    @http_method.setter
    def http_method(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_method", value)

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> Optional[pulumi.Input[str]]:
        """
        The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        """
        return pulumi.get(self, "http_request_body")

    @http_request_body.setter
    def http_request_body(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "http_request_body", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        The Vault credential library name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter
    def path(self) -> Optional[pulumi.Input[str]]:
        """
        The path in Vault to request credentials from.
        """
        return pulumi.get(self, "path")

    @path.setter
    def path(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "path", value)


class BoundaryCredentialLibraryVault(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        The credential library for Vault resource allows you to configure a Boundary credential library for Vault.

        ## Example Usage

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        foo_boundary_credential_store_vault = boundary.BoundaryCredentialStoreVault("fooBoundaryCredentialStoreVault",
            description="My first Vault credential store!",
            address="http://127.0.0.1:8200",
            token="s.0ufRo6XEGU2jOqnIr7OlFYP5",
            scope_id=project.id)
        foo_boundary_credential_library_vault = boundary.BoundaryCredentialLibraryVault("fooBoundaryCredentialLibraryVault",
            description="My first Vault credential library!",
            credential_store_id=foo_boundary_credential_store_vault.id,
            path="my/secret/foo",
            http_method="GET")
        bar = boundary.BoundaryCredentialLibraryVault("bar",
            description="My second Vault credential library!",
            credential_store_id=foo_boundary_credential_store_vault.id,
            path="my/secret/bar",
            http_method="POST",
            http_request_body=\"\"\"{
          "key": "Value",
        }
        \"\"\")
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryCredentialLibraryVault:BoundaryCredentialLibraryVault foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[str] credential_type: The type of credential the library generates.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[str] http_method: The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        :param pulumi.Input[str] http_request_body: The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: BoundaryCredentialLibraryVaultArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        The credential library for Vault resource allows you to configure a Boundary credential library for Vault.

        ## Example Usage

        ```python
        import pulumi
        import katasec_boundary as boundary

        org = boundary.BoundaryScope("org",
            description="My first scope!",
            scope_id="global",
            auto_create_admin_role=True,
            auto_create_default_role=True)
        project = boundary.BoundaryScope("project",
            description="My first scope!",
            scope_id=org.id,
            auto_create_admin_role=True)
        foo_boundary_credential_store_vault = boundary.BoundaryCredentialStoreVault("fooBoundaryCredentialStoreVault",
            description="My first Vault credential store!",
            address="http://127.0.0.1:8200",
            token="s.0ufRo6XEGU2jOqnIr7OlFYP5",
            scope_id=project.id)
        foo_boundary_credential_library_vault = boundary.BoundaryCredentialLibraryVault("fooBoundaryCredentialLibraryVault",
            description="My first Vault credential library!",
            credential_store_id=foo_boundary_credential_store_vault.id,
            path="my/secret/foo",
            http_method="GET")
        bar = boundary.BoundaryCredentialLibraryVault("bar",
            description="My second Vault credential library!",
            credential_store_id=foo_boundary_credential_store_vault.id,
            path="my/secret/bar",
            http_method="POST",
            http_request_body=\"\"\"{
          "key": "Value",
        }
        \"\"\")
        ```

        ## Import

        ```sh
         $ pulumi import boundary:index/boundaryCredentialLibraryVault:BoundaryCredentialLibraryVault foo <my-id>
        ```

        :param str resource_name: The name of the resource.
        :param BoundaryCredentialLibraryVaultArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(BoundaryCredentialLibraryVaultArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 credential_store_id: Optional[pulumi.Input[str]] = None,
                 credential_type: Optional[pulumi.Input[str]] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 http_method: Optional[pulumi.Input[str]] = None,
                 http_request_body: Optional[pulumi.Input[str]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 path: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = BoundaryCredentialLibraryVaultArgs.__new__(BoundaryCredentialLibraryVaultArgs)

            if credential_store_id is None and not opts.urn:
                raise TypeError("Missing required property 'credential_store_id'")
            __props__.__dict__["credential_store_id"] = credential_store_id
            __props__.__dict__["credential_type"] = credential_type
            __props__.__dict__["description"] = description
            __props__.__dict__["http_method"] = http_method
            __props__.__dict__["http_request_body"] = http_request_body
            __props__.__dict__["name"] = name
            if path is None and not opts.urn:
                raise TypeError("Missing required property 'path'")
            __props__.__dict__["path"] = path
        super(BoundaryCredentialLibraryVault, __self__).__init__(
            'boundary:index/boundaryCredentialLibraryVault:BoundaryCredentialLibraryVault',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            credential_store_id: Optional[pulumi.Input[str]] = None,
            credential_type: Optional[pulumi.Input[str]] = None,
            description: Optional[pulumi.Input[str]] = None,
            http_method: Optional[pulumi.Input[str]] = None,
            http_request_body: Optional[pulumi.Input[str]] = None,
            name: Optional[pulumi.Input[str]] = None,
            path: Optional[pulumi.Input[str]] = None) -> 'BoundaryCredentialLibraryVault':
        """
        Get an existing BoundaryCredentialLibraryVault resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] credential_store_id: The ID of the credential store that this library belongs to.
        :param pulumi.Input[str] credential_type: The type of credential the library generates.
        :param pulumi.Input[str] description: The Vault credential library description.
        :param pulumi.Input[str] http_method: The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        :param pulumi.Input[str] http_request_body: The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        :param pulumi.Input[str] name: The Vault credential library name. Defaults to the resource name.
        :param pulumi.Input[str] path: The path in Vault to request credentials from.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _BoundaryCredentialLibraryVaultState.__new__(_BoundaryCredentialLibraryVaultState)

        __props__.__dict__["credential_store_id"] = credential_store_id
        __props__.__dict__["credential_type"] = credential_type
        __props__.__dict__["description"] = description
        __props__.__dict__["http_method"] = http_method
        __props__.__dict__["http_request_body"] = http_request_body
        __props__.__dict__["name"] = name
        __props__.__dict__["path"] = path
        return BoundaryCredentialLibraryVault(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="credentialStoreId")
    def credential_store_id(self) -> pulumi.Output[str]:
        """
        The ID of the credential store that this library belongs to.
        """
        return pulumi.get(self, "credential_store_id")

    @property
    @pulumi.getter(name="credentialType")
    def credential_type(self) -> pulumi.Output[Optional[str]]:
        """
        The type of credential the library generates.
        """
        return pulumi.get(self, "credential_type")

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        The Vault credential library description.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="httpMethod")
    def http_method(self) -> pulumi.Output[Optional[str]]:
        """
        The HTTP method the library uses when requesting credentials from Vault. Defaults to 'GET'
        """
        return pulumi.get(self, "http_method")

    @property
    @pulumi.getter(name="httpRequestBody")
    def http_request_body(self) -> pulumi.Output[Optional[str]]:
        """
        The body of the HTTP request the library sends to Vault when requesting credentials. Only valid if `http_method` is set to `POST`.
        """
        return pulumi.get(self, "http_request_body")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        The Vault credential library name. Defaults to the resource name.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter
    def path(self) -> pulumi.Output[str]:
        """
        The path in Vault to request credentials from.
        """
        return pulumi.get(self, "path")

