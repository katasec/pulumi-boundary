// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * The scope resource allows you to configure a Boundary scope.
 *
 * ## Example Usage
 *
 * Creating the global scope:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as boundary from "@pulumi/boundary";
 *
 * const global = new boundary.BoundaryScope("global", {
 *     globalScope: true,
 *     scopeId: "global",
 * });
 * ```
 *
 * Creating an organization scope within global:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as boundary from "@katasec/boundary";
 *
 * const org = new boundary.BoundaryScope("org", {
 *     description: "My first scope!",
 *     scopeId: boundary_scope.global.id,
 *     autoCreateAdminRole: true,
 *     autoCreateDefaultRole: true,
 * });
 * ```
 *
 * Creating an project scope within an organization:
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as boundary from "@katasec/boundary";
 *
 * const project = new boundary.BoundaryScope("project", {
 *     description: "My first scope!",
 *     scopeId: boundary_scope.org.id,
 *     autoCreateAdminRole: true,
 * });
 * ```
 *
 * Creating an organization scope with a managed role for administration (auto create role set false):
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as boundary from "@katasec/boundary";
 *
 * const org = new boundary.BoundaryScope("org", {
 *     description: "My first scope!",
 *     scopeId: boundary_scope.global.id,
 * });
 * const orgAdmin = new boundary.BoundaryRole("orgAdmin", {
 *     scopeId: boundary_scope.global.id,
 *     grantScopeId: org.id,
 *     grantStrings: ["id=*;type=*;actions=*"],
 *     principalIds: ["u_auth"],
 * });
 * ```
 *
 * ## Import
 *
 * ```sh
 *  $ pulumi import boundary:index/boundaryScope:BoundaryScope foo <my-id>
 * ```
 */
export class BoundaryScope extends pulumi.CustomResource {
    /**
     * Get an existing BoundaryScope resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: BoundaryScopeState, opts?: pulumi.CustomResourceOptions): BoundaryScope {
        return new BoundaryScope(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'boundary:index/boundaryScope:BoundaryScope';

    /**
     * Returns true if the given object is an instance of BoundaryScope.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is BoundaryScope {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === BoundaryScope.__pulumiType;
    }

    /**
     * If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
     * in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
     * HCL but results in role resources that are unmanaged by Terraform.
     */
    public readonly autoCreateAdminRole!: pulumi.Output<boolean | undefined>;
    /**
     * Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
     * functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
     * ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
     * that are unmanaged by Terraform.
     */
    public readonly autoCreateDefaultRole!: pulumi.Output<boolean | undefined>;
    /**
     * The scope description.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
     */
    public readonly globalScope!: pulumi.Output<boolean | undefined>;
    /**
     * The scope name. Defaults to the resource name.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * The scope ID containing the sub scope resource.
     */
    public readonly scopeId!: pulumi.Output<string>;

    /**
     * Create a BoundaryScope resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: BoundaryScopeArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: BoundaryScopeArgs | BoundaryScopeState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as BoundaryScopeState | undefined;
            resourceInputs["autoCreateAdminRole"] = state ? state.autoCreateAdminRole : undefined;
            resourceInputs["autoCreateDefaultRole"] = state ? state.autoCreateDefaultRole : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["globalScope"] = state ? state.globalScope : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["scopeId"] = state ? state.scopeId : undefined;
        } else {
            const args = argsOrState as BoundaryScopeArgs | undefined;
            if ((!args || args.scopeId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'scopeId'");
            }
            resourceInputs["autoCreateAdminRole"] = args ? args.autoCreateAdminRole : undefined;
            resourceInputs["autoCreateDefaultRole"] = args ? args.autoCreateDefaultRole : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["globalScope"] = args ? args.globalScope : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["scopeId"] = args ? args.scopeId : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(BoundaryScope.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering BoundaryScope resources.
 */
export interface BoundaryScopeState {
    /**
     * If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
     * in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
     * HCL but results in role resources that are unmanaged by Terraform.
     */
    autoCreateAdminRole?: pulumi.Input<boolean>;
    /**
     * Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
     * functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
     * ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
     * that are unmanaged by Terraform.
     */
    autoCreateDefaultRole?: pulumi.Input<boolean>;
    /**
     * The scope description.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
     */
    globalScope?: pulumi.Input<boolean>;
    /**
     * The scope name. Defaults to the resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The scope ID containing the sub scope resource.
     */
    scopeId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a BoundaryScope resource.
 */
export interface BoundaryScopeArgs {
    /**
     * If set, when a new scope is created, the provider will not disable the functionality that automatically creates a role
     * in the new scope and gives permissions to manage the scope to the provider's user. Marking this true makes for simpler
     * HCL but results in role resources that are unmanaged by Terraform.
     */
    autoCreateAdminRole?: pulumi.Input<boolean>;
    /**
     * Only relevant when creating an org scope. If set, when a new scope is created, the provider will not disable the
     * functionality that automatically creates a role in the new scope and gives listing of scopes and auth methods and the
     * ability to authenticate to the anonymous user. Marking this true makes for simpler HCL but results in role resources
     * that are unmanaged by Terraform.
     */
    autoCreateDefaultRole?: pulumi.Input<boolean>;
    /**
     * The scope description.
     */
    description?: pulumi.Input<string>;
    /**
     * Indicates that the scope containing this value is the global scope, which triggers some specialized behavior to allow it to be imported and managed.
     */
    globalScope?: pulumi.Input<boolean>;
    /**
     * The scope name. Defaults to the resource name.
     */
    name?: pulumi.Input<string>;
    /**
     * The scope ID containing the sub scope resource.
     */
    scopeId: pulumi.Input<string>;
}
